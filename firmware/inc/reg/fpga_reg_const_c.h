/////////////////////////////////////////////////////////////////////////////////
// This file has been automatically generated by register_slave.pl version dc9b7d3
/////////////////////////////////////////////////////////////////////////////////

// type declaration
#ifndef __REG_CONST_T
#define __REG_CONST_T

#ifndef REG_CONST_NAME_STRING_MAX_LEN   
#define REG_CONST_NAME_STRING_MAX_LEN 64
#endif // REG_CONST_NAME_STRING_MAX_LEN
#ifndef REG_CONST_DESC_STRING_MAX_LEN
#define REG_CONST_DESC_STRING_MAX_LEN 512
#endif // REG_CONST_DESC_STRING_MAX_LEN
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	DWORD address;
	DWORD def;
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} reg_const_t;
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	char range[32];
	char def[32];
	char access[32];
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} field_const_t;
typedef struct {
	field_const_t *pfield;
	DWORD size;
} field_const_array_t;
#endif // __REG_CONST_T

#define NUM_REGS__FPGA_REG  27
/* { reg_const_fpga_reg, 27, "fpga_reg"},  */ 
static reg_const_t reg_const_fpga_reg[NUM_REGS__FPGA_REG] = {
  {/* name */ "git_version", /* address */ 0x44123010, /* default */ 0x00000000, /* description */ "git version the FPGA build is created\n"}, 
  {/* name */ "build_date", /* address */ 0x44123014, /* default */ 0x00000000, /* description */ "date the FPGA build is created\n"}, 
  {/* name */ "build_time", /* address */ 0x44123018, /* default */ 0x00000000, /* description */ "Time the FPGA build is created\n"}, 
  {/* name */ "fpga_modem_ctrl", /* address */ 0x4412301c, /* default */ 0x00000000, /* description */ "FPGA modem control\n"}, 
  {/* name */ "fpga_clk_ctrl", /* address */ 0x44123020, /* default */ 0x00000000, /* description */ "FPGA modem control\n"}, 
  {/* name */ "fpga_tx_rx_en_ext", /* address */ 0x44123024, /* default */ 0x00000000, /* description */ "FPGA tx/rx enable extend length (in us)\n"}, 
  {/* name */ "fpga_32k_cycle_limit", /* address */ 0x44123028, /* default */ 0x03d103d0, /* description */ "FPGA 32K clock cycle limit\n"}, 
  {/* name */ "fpga_io_board_ctrl", /* address */ 0x44123030, /* default */ 0x000011f0, /* description */ "FPGA I/O sensor board control\n"}, 
  {/* name */ "fpga_i2s_ctrl", /* address */ 0x44123034, /* default */ 0x00010303, /* description */ "FPGA I/O sensor board control\n"}, 
  {/* name */ "fpga_spi_m0_ctrl", /* address */ 0x44123038, /* default */ 0x00000001, /* description */ "FPGA SPI master 0 pad control\n"}, 
  {/* name */ "fpga_spi_flash_ctrl", /* address */ 0x4412303c, /* default */ 0x032100f3, /* description */ "FPGA SPI flash control\n"}, 
  {/* name */ "fpga_rx_ctrl", /* address */ 0x44123080, /* default */ 0x00018460, /* description */ "FPGA Rx Model control\n"}, 
  {/* name */ "fpga_rx_stat", /* address */ 0x44123084, /* default */ 0x00000000, /* description */ "FPGA Rx Model status\n"}, 
  {/* name */ "fpga_ext_wakeup_cnt_ctrl", /* address */ 0x44123090, /* default */ 0x80001000, /* description */ "FPGA external wakeup counter control\n"}, 
  {/* name */ "fpga_ext_gpo_ctrl", /* address */ 0x44123098, /* default */ 0x0000000a, /* description */ "FPGA manual control output\n"}, 
  {/* name */ "fpga_ext_gpi_sts", /* address */ 0x4412309c, /* default */ 0x00000000, /* description */ "FPGA input signal status\n"}, 
  {/* name */ "fpga_pdm_mic_misc_ctrl", /* address */ 0x44123100, /* default */ 0x00000000, /* description */ "PDM input data misc control\n"}, 
  {/* name */ "fpga_pdm_mem_mic_start_addr", /* address */ 0x44123104, /* default */ 0x00000000, /* description */ "\n"}, 
  {/* name */ "fpga_pdm_mem_mic_end_addr", /* address */ 0x44123108, /* default */ 0x00000000, /* description */ "\n"}, 
  {/* name */ "fpga_pdm_mem_write_init_addr", /* address */ 0x4412310c, /* default */ 0x00000000, /* description */ "\n"}, 
  {/* name */ "fpga_pdm_mem_wdata", /* address */ 0x44123110, /* default */ 0x00000000, /* description */ "\n"}, 
  {/* name */ "fpga_capture_pdm_saddr", /* address */ 0x44123114, /* default */ 0x00000000, /* description */ "\n"}, 
  {/* name */ "fpga_capture_pdm_size", /* address */ 0x44123118, /* default */ 0x00000fff, /* description */ "\n"}, 
  {/* name */ "fpga_capture_pdm_en", /* address */ 0x4412311c, /* default */ 0x00000001, /* description */ "\n"}, 
  {/* name */ "fpga_capture_pdm_rdata", /* address */ 0x44123120, /* default */ 0x00000000, /* description */ "\n"}, 
  {/* name */ "fpga_capture_full", /* address */ 0x44123124, /* default */ 0x00000000, /* description */ "\n"}, 
  {/* name */ "fpga_uart_rx_ctrl", /* address */ 0x44123140, /* default */ 0x00000000, /* description */ "\n"}
};

field_const_t field_const_fpga_reg__git_version[]  = {
  {/* name */ "sts_git_ver", /* range */ "[23:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "git version\n"}, 
  {/* name */ "sts_git_update", /* range */ "[31:31]", /* default */ "0x0", /* access */ "read-only", /* description */ "Unstaged update exist\n"}
};
field_const_t field_const_fpga_reg__build_date[]  = {
  {/* name */ "sts_date_day", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "day in the month\n"}, 
  {/* name */ "sts_date_month", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "month in the year\n"}, 
  {/* name */ "sts_date_year", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "year\n"}
};
field_const_t field_const_fpga_reg__build_time[]  = {
  {/* name */ "sts_time_minute", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Minute\n"}, 
  {/* name */ "sts_time_hour", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "Hour\n"}
};
field_const_t field_const_fpga_reg__fpga_modem_ctrl[]  = {
  {/* name */ "ctl_fcs_iq_swap", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Swap IQ in FCS\n"}, 
  {/* name */ "ctl_fcs_const", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "constant input to fcs\n"}, 
  {/* name */ "ctl_dac_bit_shift", /* range */ "[2:2]", /* default */ "0x0", /* access */ "read-write", /* description */ "right shift dac input by 1 bit\n"}, 
  {/* name */ "ctl_dac_iq_swap", /* range */ "[4:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "swap I/Q data going into DAC.\n"}, 
  {/* name */ "ctl_rf_busy_en", /* range */ "[8:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "enable RF busy signal\n"}, 
  {/* name */ "ctl_use_ram_freqword", /* range */ "[12:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "Use RAM version frequency word (by default use ROM version)\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:13]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_clk_ctrl[]  = {
  {/* name */ "ctl_clk_switch", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "switch clock from on board xtal clock to ADC clock\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_tx_rx_en_ext[]  = {
  {/* name */ "ctl_tx_en_ext", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "tx en extension value (in us)\n"}, 
  {/* name */ "ctl_rx_en_ext", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "rx en extension value (in us)\n"}, 
  {/* name */ "ctl_tx_en_ext2", /* range */ "[23:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "tx en extension value (in us), used to create RF busy signal\n"}, 
  {/* name */ "ctl_rx_en_ext2", /* range */ "[31:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "rx en extension value (in us), used to create RF busy signal\n"}
};
field_const_t field_const_fpga_reg__fpga_32k_cycle_limit[]  = {
  {/* name */ "ctl_32k_low_duration", /* range */ "[15:0]", /* default */ "0x3d0", /* access */ "read-write", /* description */ "duration of low level (in number of 64MHz clock cycles)\n"}, 
  {/* name */ "ctl_32k_high_duration", /* range */ "[31:16]", /* default */ "0x3d1", /* access */ "read-write", /* description */ "duration of high level (in number of 64MHz clock cycles)\n"}
};
field_const_t field_const_fpga_reg__fpga_io_board_ctrl[]  = {
  {/* name */ "ctl_io_board_i2c_sel", /* range */ "[2:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Selection of I/O board: 0 - heart rate monitor, 1 - Acc & Gyro sensor, 2 - FIR, 3 - Temp & Humidity sensor, 4 - OLED, 5 - CODEC, 6 - LIGHT, \n"}, 
  {/* name */ "ctl_u2_oe", /* range */ "[4:4]", /* default */ "0x1", /* access */ "read-write", /* description */ "Enable level shifter U2\n"}, 
  {/* name */ "ctl_u3_oe", /* range */ "[5:5]", /* default */ "0x1", /* access */ "read-write", /* description */ "Enable level shifter U3\n"}, 
  {/* name */ "ctl_u14_oe", /* range */ "[6:6]", /* default */ "0x1", /* access */ "read-write", /* description */ "Enable level shifter U14\n"}, 
  {/* name */ "ctl_u15_oe", /* range */ "[7:7]", /* default */ "0x1", /* access */ "read-write", /* description */ "Enable level shifter U15\n"}, 
  {/* name */ "ctl_u16_oe", /* range */ "[8:8]", /* default */ "0x1", /* access */ "read-write", /* description */ "Enable level shifter U16\n"}, 
  {/* name */ "ctl_hrt_pd", /* range */ "[12:12]", /* default */ "0x1", /* access */ "read-write", /* description */ "Heart rate power down (active high)\n"}, 
  {/* name */ "ctl_hrt_rstn", /* range */ "[13:13]", /* default */ "0x0", /* access */ "read-write", /* description */ "Heart rate reset (active low)\n"}, 
  {/* name */ "ctl_codec_pdn", /* range */ "[14:14]", /* default */ "0x0", /* access */ "read-write", /* description */ "Codec power down (active low)\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:15]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_i2s_ctrl[]  = {
  {/* name */ "ctl_i2s_sclk_high_duration", /* range */ "[7:0]", /* default */ "0x3", /* access */ "read-write", /* description */ "High duration for I2S clock (# of 32MHz clock)\n"}, 
  {/* name */ "ctl_i2s_sclk_low_duration", /* range */ "[15:8]", /* default */ "0x3", /* access */ "read-write", /* description */ "Low duration for I2S clock (# of 32MHz clock)\n"}, 
  {/* name */ "ctl_i2s_sclk_to_pad", /* range */ "[16:16]", /* default */ "0x1", /* access */ "read-write", /* description */ "Send I2S sclk to pad\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:17]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_spi_m0_ctrl[]  = {
  {/* name */ "ctl_spi_m0_single_mode", /* range */ "[0:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "Single wire mode SPI. Tx/Rx use different pads\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_spi_flash_ctrl[]  = {
  {/* name */ "ctl_spi_flash_wp_n", /* range */ "[0:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "SPI flash write protect, active low\n"}, 
  {/* name */ "ctl_spi_flash_hold_n", /* range */ "[1:1]", /* default */ "0x1", /* access */ "read-write", /* description */ "SPI flash hold, active low\n"}, 
  {/* name */ "ctl_spi_master_ss_n", /* range */ "[7:4]", /* default */ "0xf", /* access */ "read-write", /* description */ "SPI master ss_n signal (manually programmed by CPU)\n"}, 
  {/* name */ "ctl_spi_master_ss_n_sel", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "SPI master ss_n signal selection. 0 - SPI master IP. 1 - manual control\n"}, 
  {/* name */ "ctl_ssi_master0_ssn0_mux", /* range */ "[13:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 - ssn0, 1 -ssn1, 2 - ssn2, 3 -- ssn3\n"}, 
  {/* name */ "ctl_ssi_master0_ssn1_mux", /* range */ "[17:16]", /* default */ "0x1", /* access */ "read-write", /* description */ "0 - ssn0, 1 -ssn1, 2 - ssn2, 3 -- ssn3\n"}, 
  {/* name */ "ctl_ssi_master0_ssn2_mux", /* range */ "[21:20]", /* default */ "0x2", /* access */ "read-write", /* description */ "0 - ssn0, 1 -ssn1, 2 - ssn2, 3 -- ssn3\n"}, 
  {/* name */ "ctl_ssi_master0_ssn3_mux", /* range */ "[25:24]", /* default */ "0x3", /* access */ "read-write", /* description */ "0 - ssn0, 1 -ssn1, 2 - ssn2, 3 -- ssn3\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:26]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_rx_ctrl[]  = {
  {/* name */ "ctl_gain_rx", /* range */ "[9:0]", /* default */ "0x60", /* access */ "read-write", /* description */ "Rx gain (u5.5)\n"}, 
  {/* name */ "ctl_sdm_en", /* range */ "[10:10]", /* default */ "0x1", /* access */ "read-write", /* description */ "Sigma-Delta Modulator enable\n"}, 
  {/* name */ "ctl_sdm_dither_gain", /* range */ "[12:11]", /* default */ "0x0", /* access */ "read-write", /* description */ "Sigma Delta dither gain\n"}, 
  {/* name */ "ctl_sdm_dither_order", /* range */ "[14:13]", /* default */ "0x0", /* access */ "read-write", /* description */ "Sigma Delta dither order\n"}, 
  {/* name */ "ctl_sdm_mod_index", /* range */ "[16:15]", /* default */ "0x3", /* access */ "read-write", /* description */ "Sigma Delta modulo index\n"}, 
  {/* name */ "ctl_sdm_mux_sel", /* range */ "[18:17]", /* default */ "0x0", /* access */ "read-write", /* description */ "Sigma Delta mux sel\n"}, 
  {/* name */ "ctl_rx_clk_sel_frc", /* range */ "[19:19]", /* default */ "0x0", /* access */ "read-write", /* description */ "Force rx_clk_sel to be "ctl_rx_clk_sel_val", otherwise, it comes from BLE core itself.\n"}, 
  {/* name */ "ctl_rx_clk_sel_val", /* range */ "[20:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "0:64 MHz clock\n 1:128 MHz clock\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:21]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_rx_stat[]  = {
  {/* name */ "sts_sdm_mux_out_i", /* range */ "[14:0]", /* default */ "0x0", /* access */ "read-only", /* description */ ""I" Sigma Delta mod\n"}, 
  {/* name */ "sts_sdm_mux_out_q", /* range */ "[30:16]", /* default */ "0x0", /* access */ "read-only", /* description */ ""Q" Sigma Delta mod\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:31]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_ext_wakeup_cnt_ctrl[]  = {
  {/* name */ "ctl_wakeup_cnt_lmt", /* range */ "[30:0]", /* default */ "0x1000", /* access */ "read-write", /* description */ "Counter limit [31:1]. LSB is always 0.\n"}, 
  {/* name */ "ctl_wakeup_cnt_clr", /* range */ "[31:31]", /* default */ "0x1", /* access */ "read-write", /* description */ "1 -- clear counter. 0 -- counting\n"}
};
field_const_t field_const_fpga_reg__fpga_ext_gpo_ctrl[]  = {
  {/* name */ "ctl_ext_gpo_val", /* range */ "[3:0]", /* default */ "0xa", /* access */ "read-write", /* description */ "Output value to GPO\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:4]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_ext_gpi_sts[]  = {
  {/* name */ "sts_ext_gpi_val", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Input from GPI (also used as part of external wakeup pin)\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:4]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_pdm_mic_misc_ctrl[]  = {
  {/* name */ "ctl_pdm_data_src", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 - from pads, 1 - from memory\n"}, 
  {/* name */ "ctl_pdm_mem_en", /* range */ "[4:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "enable output from memory\n"}, 
  {/* name */ "ctl_pdm_mem_clk_edge", /* range */ "[5:5]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 -falling edge, 1 - rising edge\n"}, 
  {/* name */ "ctl_pdm_mem_lsb_first", /* range */ "[6:6]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 - msb first, 1 - lsb first\n"}, 
  {/* name */ "ctl_pdm_mem_stereo", /* range */ "[7:7]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 - msb first, 1 - lsb first\n"}
};
field_const_t field_const_fpga_reg__fpga_pdm_mem_mic_start_addr[]  = {
  {/* name */ "ctl_pdm_mem_start_addr", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "start reading address\n"}
};
field_const_t field_const_fpga_reg__fpga_pdm_mem_mic_end_addr[]  = {
  {/* name */ "ctl_pdm_mem_end_addr", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "end reading address\n"}
};
field_const_t field_const_fpga_reg__fpga_pdm_mem_write_init_addr[]  = {
  {/* name */ "ctl_pdm_mem_write_init_addr", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "A write will set initial write address\n"}
};
field_const_t field_const_fpga_reg__fpga_pdm_mem_wdata[]  = {
  {/* name */ "ctl_pdm_mem_wdata", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "each write will automatically increase write address\n"}
};
field_const_t field_const_fpga_reg__fpga_capture_pdm_saddr[]  = {
  {/* name */ "ctl_capture_pdm_saddr", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "a write set inital memory address to caputure pdm data\n"}
};
field_const_t field_const_fpga_reg__fpga_capture_pdm_size[]  = {
  {/* name */ "ctl_capture_pdm_size", /* range */ "[11:0]", /* default */ "0xfff", /* access */ "read-write", /* description */ "a write set capture size for pdm data\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:12]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_capture_pdm_en[]  = {
  {/* name */ "ctl_capture_pdm_en", /* range */ "[0:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "a write set capture enable signal\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_capture_pdm_rdata[]  = {
  {/* name */ "ctl_capture_pdm_rdata", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "each read will automatically increase read address\n"}
};
field_const_t field_const_fpga_reg__fpga_capture_full[]  = {
  {/* name */ "ctl_capture_full", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "each read will automatically increase read address\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_fpga_reg__fpga_uart_rx_ctrl[]  = {
  {/* name */ "ctl_disable_uart0_rx", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set, uart0 rx is always 1 \n"}, 
  {/* name */ "ctl_disable_uart1_rx", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set, uart1 rx is always 1 \n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};

field_const_array_t reg_pnt_list__fpga_reg[NUM_REGS__FPGA_REG] = {
  { /* pfield */ field_const_fpga_reg__git_version, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__build_date, /* size */ 3}, 
  { /* pfield */ field_const_fpga_reg__build_time, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_modem_ctrl, /* size */ 7}, 
  { /* pfield */ field_const_fpga_reg__fpga_clk_ctrl, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_tx_rx_en_ext, /* size */ 4}, 
  { /* pfield */ field_const_fpga_reg__fpga_32k_cycle_limit, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_io_board_ctrl, /* size */ 10}, 
  { /* pfield */ field_const_fpga_reg__fpga_i2s_ctrl, /* size */ 4}, 
  { /* pfield */ field_const_fpga_reg__fpga_spi_m0_ctrl, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_spi_flash_ctrl, /* size */ 9}, 
  { /* pfield */ field_const_fpga_reg__fpga_rx_ctrl, /* size */ 9}, 
  { /* pfield */ field_const_fpga_reg__fpga_rx_stat, /* size */ 3}, 
  { /* pfield */ field_const_fpga_reg__fpga_ext_wakeup_cnt_ctrl, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_ext_gpo_ctrl, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_ext_gpi_sts, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_pdm_mic_misc_ctrl, /* size */ 5}, 
  { /* pfield */ field_const_fpga_reg__fpga_pdm_mem_mic_start_addr, /* size */ 1}, 
  { /* pfield */ field_const_fpga_reg__fpga_pdm_mem_mic_end_addr, /* size */ 1}, 
  { /* pfield */ field_const_fpga_reg__fpga_pdm_mem_write_init_addr, /* size */ 1}, 
  { /* pfield */ field_const_fpga_reg__fpga_pdm_mem_wdata, /* size */ 1}, 
  { /* pfield */ field_const_fpga_reg__fpga_capture_pdm_saddr, /* size */ 1}, 
  { /* pfield */ field_const_fpga_reg__fpga_capture_pdm_size, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_capture_pdm_en, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_capture_pdm_rdata, /* size */ 1}, 
  { /* pfield */ field_const_fpga_reg__fpga_capture_full, /* size */ 2}, 
  { /* pfield */ field_const_fpga_reg__fpga_uart_rx_ctrl, /* size */ 3}
};
