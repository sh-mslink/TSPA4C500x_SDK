/**
 ****************************************************************************************
 *
 * @file hal_clk.h
 *
 * @brief HAL clock  
 *
 * Copyright (C) Shanghai Tropos Microelectronics Co., Ltd. 2018~2019
 *
 ****************************************************************************************
 */

#ifndef HAL_CLK_H
#define HAL_CLK_H

/**
 ****************************************************************************************
 * @defgroup HAL_CLK Platform clock configuration  
 * @ingroup HAL
 * @brief  HAL_CLK
 * @{
 ****************************************************************************************
 */

#include "in_mmap.h"
#include ".\hal\hal_power.h"
/*
 * Enumerations
 ****************************************************************************************
 */

/// Clock D0 domain divider
enum clk_d0_div {
	/// Divided by 2 of XO or 32MHz RC.  This is default.
	CLK_D0_DIV2 = 0,
	/// Divided by 4 of XO or 32MHz RC
	CLK_D0_DIV4 = 2,
	/// Divided by 8 of XO or 32MHz RC
	CLK_D0_DIV8 = 3,
};

/// Clock D1 domain divider
enum clk_d1_div {
	/// Divided by 2 of XO or 32MHz RC. This is default
	CLK_D1_DIV2 = 0,
	/// Divided by 4 of XO or 32MHz RC
	CLK_D1_DIV4 = 2,
	/// Divided by 8 of XO or 32MHz RC
	CLK_D1_DIV8 = 3,
};

/// Clock D2 domain divider
enum clk_d2_div {
	/// Divided by 1 of XO or 32MHz RC
	CLK_D2_DIV1 = 0,
	/// Divided by 2 of XO or 32MHz RC. This is default.
	CLK_D2_DIV2 = 1,
	/// Divided by 4 of XO or 32MHz RC
	CLK_D2_DIV4 = 2,
	/// Divided by 8 of XO or 32MHz RC
	CLK_D2_DIV8 = 4,
};

/// Timer clock 1 divider
enum clk_tim1_div {
	/// Divided by 4 of XO or 32MHz RC. This is default.
	CLK_TIM_DIV4 = 0,
	/// Divided by 8 of XO or 32MHz RC
	CLK_TIM_DIV8 = 2,
	/// Divided by 16 of XO or 32MHz RC
	CLK_TIM_DIV16 = 3,
};

/// HW Math Accl. clock divider
enum clk_hwacc_div {
	/// Divided by 1 of XO or 32MHz RC. 
	CLK_HWACC_DIV1 = 0,
	/// Divided by 2 of XO or 32MHz RC. This is default.
	CLK_HWACC_DIV2 = 1,
	/// Divided by 4 of XO or 32MHz RC
	CLK_HWACC_DIV4 = 2,
	/// Divided by 8 of XO or 32MHz RC
	CLK_HWACC_DIV8 = 4,
};

/// Sensor ADC clock divider
enum clk_sadc_div {
	/// Divided by 4 of XO or 32MHz RC. This is default
	CLK_SADC_DIV4 = 0,
	/// Divided by 8 of XO or 32MHz RC
	CLK_SADC_DIV8 = 8,
	/// Divided by 16 of XO or 32MHz RC
	CLK_SADC_DIV16 = 12,
	/// Divided by 32 of XO or 32MHz RC
	CLK_SADC_DIV32 = 14,
	/// Divided by 64 of XO or 32MHz RC
	CLK_SADC_DIV64 = 15,
};

/// Audio speaker and SD clock mux
enum clk_spk_sd {
	/// I2S master clock generated from integer divider
	CLK_I2S_MAS_SCLK,
	/// I2S slave clock from PAD
	CLK_I2S_SLV_SCLK_PAD,
	/// PDM clock
	CLK_PDM,
};

/// Efuse clock divider
enum clk_efuse_div {
	/// Divided by 4 of XO or 32MHz RC. 
	CLK_EFUSE_DIV4 = 0,
	/// Divided by 8 of XO or 32MHz RC. This is default
	CLK_EFUSE_DIV8, 
};

/// share memory clock divider
enum clk_smem_div {
	/// Divided by 1 of XO or 32MHz RC
	CLK_SMEM_DIV1 = 0,
	/// Divided by 2 of XO or 32MHz RC. This is default.
	CLK_SMEM_DIV2 = 1,
	/// Divided by 4 of XO or 32MHz RC
	CLK_SMEM_DIV4 = 2,
	/// Divided by 8 of XO or 32MHz RC
	CLK_SMEM_DIV8 = 4,
};

/// QSPI serial clock divider
enum clk_qspi_div {
	/// Divided by 1 of XO or 32MHz RC
	CLK_QSPI_DIV1 = 0,
	/// Divided by 2 of XO or 32MHz RC. This is default.
	CLK_QSPI_DIV2 = 1,
	/// Divided by 4 of XO or 32MHz RC
	CLK_QSPI_DIV4 = 2,
	/// Divided by 8 of XO or 32MHz RC
	CLK_QSPI_DIV8 = 4,
};

/// Error return code
enum clk_error {
	/// No error
	CLK_ERR_NO_ERROR = 0,
	/// Invalid input paramters.
	CLK_ERR_INVALID_PARAM = -1,
};

/*
 * Inline Functions
 ****************************************************************************************
 */
static __inline void clk_root_mux(int xo_clk)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	if (xo_clk)
		reg |= GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_64MXO_OR_32MRC;
	else
		reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_64MXO_OR_32MRC;
	
	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline int clk_root_mux_get(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	return ((reg & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_64MXO_OR_32MRC) ? 1 : 0); 
}

static __inline void clk_d0_mux(uint32_t clk_div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK;
	reg |= ((clk_div & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK_SHIFT); 

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline uint32_t clk_d0_mux_get(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	return ((reg & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK) >> GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK_SHIFT);
}

static __inline void clk_d1_mux(uint32_t clk_div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS;
	reg |= ((clk_div & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS_SHIFT); 

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline uint32_t clk_d1_mux_get(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	return ((reg & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS) >> GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS_SHIFT);
}

static __inline void clk_d2_mux(uint32_t clk_div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK;
	reg |= ((clk_div & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK_SHIFT); 

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline uint32_t clk_d2_mux_get(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	return ((reg & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK) >> GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK_SHIFT);
}

static __inline void clk_timer1_mux(uint32_t clk_div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_D0_SEL_TMR0_CLK;
	reg |= (clk_div << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_D0_SEL_TMR0_CLK_SHIFT); 

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline uint32_t clk_timer1_mux_get(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	return ((reg & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_D0_SEL_TMR0_CLK) >> GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_D0_SEL_TMR0_CLK_SHIFT);
}

static __inline void clk_timer2_mux(int rtc_clk)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	if (rtc_clk)
		reg |= GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_D0_SEL_32KRC_RTC_CLK;
	else
		reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_D0_SEL_32KRC_RTC_CLK;

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline void clk_hwacc_mux(uint32_t clk_div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_HWACC_CLK;
	reg |= ((clk_div & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_HWACC_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_HWACC_CLK_SHIFT);

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline void clk_sadc_mux(uint32_t clk_div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_SADC_CLK;
	reg |= ((clk_div & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_SADC_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_SADC_CLK_SHIFT);

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline uint32_t clk_sadc_mux_get(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	return ((reg & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_SADC_CLK) >> GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_SADC_CLK_SHIFT);
}

static __inline void clk_slv_i2s_mux(int from_pad)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	if (from_pad) {
		reg |= GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_I2S_SLAVE_SCLK_FROM_PAD;
	} else {
		reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_I2S_SLAVE_SCLK_FROM_PAD;
	}

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline void clk_audio_codec_mux(uint32_t mux)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_AUDIO_SPK_SD_CLK;
	reg |= ((mux & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_AUDIO_SPK_SD_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_AUDIO_SPK_SD_CLK_SHIFT);

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline void clk_efuse_mux(uint32_t clk_div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_EFUSE_CLK;
	reg |= (clk_div & 0x1) << 25;
	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline void clk_smem_mux(uint32_t clk_div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);

	reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_SHM_CLK;
	reg |= ((clk_div & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_SHM_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_SHM_CLK_SHIFT);

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline void clk_mi2s(uint32_t div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_2);

	reg &= ~GLOBAL_REG_CLK_CTRL_2_CTL_CLK_CTRL_2_INT_DIV_VALUE;
	reg |= ((div & GLOBAL_REG_CLK_CTRL_2_CTL_CLK_CTRL_2_INT_DIV_VALUE_MASK) << GLOBAL_REG_CLK_CTRL_2_CTL_CLK_CTRL_2_INT_DIV_VALUE_SHIFT);

	WR_WORD(GLOBAL_REG_CLK_CTRL_2, reg);
}

static __inline void clk_qspi_mux(uint32_t div)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_2);

	reg &= ~GLOBAL_REG_CLK_CTRL_2_CTL_CLK_CTRL_2_SEL_SSIMAS0_CLK;
	reg |= ((div & GLOBAL_REG_CLK_CTRL_2_CTL_CLK_CTRL_2_SEL_SSIMAS0_CLK_MASK) << GLOBAL_REG_CLK_CTRL_2_CTL_CLK_CTRL_2_SEL_SSIMAS0_CLK_SHIFT);

	WR_WORD(GLOBAL_REG_CLK_CTRL_2, reg);
}

static __inline uint32_t clk_qspi_mux_get(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_2);

	return ((reg & GLOBAL_REG_CLK_CTRL_2_CTL_CLK_CTRL_2_SEL_SSIMAS0_CLK) >> GLOBAL_REG_CLK_CTRL_2_CTL_CLK_CTRL_2_SEL_SSIMAS0_CLK_SHIFT);
}

static __inline void clk_efuse_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);
	uint32_t reg2 = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);


	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_EFUSE_CLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_EFUSECTRL_TOP_PCLK;
		reg2 |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_EFUSE_1_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_EFUSE_CLK;
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_EFUSECTRL_TOP_PCLK;
		reg2 &= ~GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_EFUSE_1_CLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg2);
}

static __inline void clk_spiflash_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);


	if (en) {
		reg |= 	(GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SPIFLASH_CTRL_PCLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SSI_MAS0_CLK);
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SSI_MASTER0_PCLK;
	} else {
		reg &= ~(GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SPIFLASH_CTRL_PCLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SSI_MAS0_CLK);
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SSI_MASTER0_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_kb_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_KEYBOARD_CLK_FREE|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_KEYBOARD_CLK_GATED;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_KEYBOARD_TOP_PCLK;
	} else {
		reg &= ~(GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_KEYBOARD_CLK_FREE|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_KEYBOARD_CLK_GATED);
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_KEYBOARD_TOP_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_hash_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SECURITY_CORE_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SECURITY_CORE_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
}

static __inline void clk_ecc_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SECURITY_CORE_PCLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_FW_RAM_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_A_CLK|
						GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_B_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_C_CLK|
						GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_D_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SECURITY_CORE_PCLK;
		reg1 &= ~(GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_FW_RAM_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_A_CLK|
						GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_B_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_C_CLK|
						GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_D_CLK);
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_aes_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SECURITY_CORE_PCLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_FW_RAM_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_A_CLK|
						GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_B_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_C_CLK|
						GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_D_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SECURITY_CORE_PCLK;
		reg1 &= ~(GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_FW_RAM_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_A_CLK|
						GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_B_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_C_CLK|
						GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_D_CLK);
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_mspi_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_SSI_MASTER1_SSI_CLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SSI_MASTER1_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_SSI_MASTER1_SSI_CLK;
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SSI_MASTER1_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_sspi_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_SSI_SLAVE0_SSI_CLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SSI_SLAVE0_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_SSI_SLAVE0_SSI_CLK;
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SSI_SLAVE0_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_intr_ctl_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_INTRCTRL_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_INTRCTRL_CLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
}

static __inline void clk_wdt_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_WDT_TCLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_WDT_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_WDT_TCLK;
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_WDT_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_i2c0_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2C_0_IC_CLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2C_0_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2C_0_IC_CLK;
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2C_0_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_i2c1_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2C_1_IC_CLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2C_1_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2C_1_IC_CLK;
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2C_1_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_tim0_en(int id, int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_TIMERS_0_TIMER_1_CLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_TIMERS_0_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_TIMERS_0_TIMER_1_CLK;
		if (!(reg & (GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_TIMERS_0_TIMER_1_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_TIMERS_0_TIMER_2_CLK)))
			reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_TIMERS_0_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_tim1_en(int id, int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_TIMERS_0_TIMER_2_CLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_TIMERS_0_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_TIMERS_0_TIMER_2_CLK;
		if (!(reg & (GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_TIMERS_0_TIMER_1_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_TIMERS_0_TIMER_2_CLK)))
			reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_TIMERS_0_PCLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_pwm0_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM0_PCLK;
	} else {
		reg &= ~	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM0_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
}

static __inline void clk_pwm1_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM1_PCLK;
	} else {
		reg &= ~	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM1_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
}

static __inline void clk_pwm2_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM2_PCLK;
	} else {
		reg &= ~	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM2_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
}

static __inline void clk_pwm3_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM3_PCLK;
	} else {
		reg &= ~	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM3_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
}

static __inline void clk_pwm4_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM4_PCLK;
	} else {
		reg &= ~	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM4_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
}

static __inline void clk_counter_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD1_ENABLE_1);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_COUNTER_TOP_PCLK;
		reg1 |= GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_COUNTER_HCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_COUNTER_TOP_PCLK;
		reg1 &= ~GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_COUNTER_HCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD1_ENABLE_1, reg1);
}

static __inline void clk_audio_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_AURX_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_AUTX_CLK|
						GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_64M_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_SPK_CLK|
						GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_SD_CLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_AUDIO_TOP_PCLK;
	} else {
		reg &= ~(GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_AURX_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_AUTX_CLK|
						GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_64M_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_SPK_CLK|
						GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_SD_CLK);
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_AUDIO_TOP_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_sadc_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SADC_CLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SADCCTRL_TOP_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SADC_CLK;
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SADCCTRL_TOP_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_mi2s_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2S_MASTER_SCLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2S_MASTER_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2S_MASTER_SCLK;
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2S_MASTER_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_si2s_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	uint32_t reg1 = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2S_SLAVE_SCLK;
		reg1 |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2S_SLAVE_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2S_SLAVE_SCLK;
		reg1 &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2S_SLAVE_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg1);
}

static __inline void clk_quaddec_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_CLK_QUADDEC|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_QUADDEC_TOP_PCLK;
	} else {
		reg &= ~(GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_CLK_QUADDEC|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_QUADDEC_TOP_PCLK);
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_dma_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_DMAC_REQ_MUX_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_DMAC_REQ_MUX_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_gpio_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_GPIO_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_GPIO_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_uart0_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_UART_0_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_UART_0_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_uart1_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en) {
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_UART_1_PCLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_UART_1_PCLK;
	}

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_sm_0_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en)
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_0_CLK;
	else
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_0_CLK;

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_sm_1_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en)
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_1_CLK;
	else
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_1_CLK;

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_sm_2_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en)
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_2_CLK;
	else
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_2_CLK;
		
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_sm_3_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en)
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_3_CLK;
	else
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_3_CLK;

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_sm_4_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);

	if (en)
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_4_CLK;
	else
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_4_CLK;

	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);
}

static __inline void clk_sm_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);

	if (en) {
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_SHAREDMEM_TOP_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_SHAREDMEM_TOP_CLK;
	}

	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}

static __inline void clk_ble_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	if (en) {
		reg |= 	GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_RXTX_SEQ_REGS_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_RXTX_SEQ_REGS_CLK;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);

	reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);
	if (en) {
		reg |= GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_CLK_EM;
	} else {
		reg &= ~GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_CLK_EM;
	}
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);


	reg = RD_WORD(GLOBAL_REG_CLKD1_ENABLE_1);
	if (en) {
		reg |= GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_AHBTRG_TOP_PCLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_MDM_CORE_CLK|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_MDM_PCLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_CLK_ANT|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_BB_MASTER1_GCLK|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_BB_MASTER_CLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_CLK_PLLTRIG_MEM|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_PCLK_PLLTRIG|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_PLLTRIG|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_CPU_I_CLK_AHBTRG|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_REGS_CLK|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_MAIN_CLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_MAIN_CLK_FREE|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_CNTR_CLK|
	
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_BLE_FE_PCLK;
	} else {
		reg &= ~(GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_AHBTRG_TOP_PCLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_MDM_CORE_CLK|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_MDM_PCLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_CLK_ANT|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_BB_MASTER1_GCLK|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_BB_MASTER_CLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_CLK_PLLTRIG_MEM|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_PCLK_PLLTRIG|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_PLLTRIG|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_CPU_I_CLK_AHBTRG|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_REGS_CLK|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_MAIN_CLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_MAIN_CLK_FREE|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_CNTR_CLK|
	
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_BLE_FE_PCLK);
	}
	WR_WORD(GLOBAL_REG_CLKD1_ENABLE_1, reg);

	reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);
	if (en)
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_CLK_EM2SHM;
	else
		reg &= ~GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_CLK_EM2SHM;
	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}


static __inline void clk_hwacc_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);

	if (en) {
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_HWACC_MEM|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_HWACC_HCLK;
	} else {
		reg &= ~(GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_HWACC_MEM|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_HWACC_HCLK);
	}

	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}

static __inline void clk_calib_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);

	if (en) {
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_CALIB_REG_CLK|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_CALIB_REF_CLK;
	} else {
		reg &= ~(GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_CALIB_REG_CLK|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_CALIB_REF_CLK);
	}

	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}

static __inline void clk_ipm_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);

	if (en) {
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_IPM_FREE;
	} else {
		reg &= ~GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_IPM_FREE;
	}

	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}

static __inline void clk_gpio_0_intr_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);

	if (en) {
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_0_INTR_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_0_INTR_CLK;
	}

	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}

static __inline void clk_gpio_1_intr_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);

	if (en) {
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_1_INTR_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_1_INTR_CLK;
	}

	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}

static __inline void clk_gpio_2_intr_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);

	if (en) {
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_2_INTR_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_2_INTR_CLK;
	}

	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}

static __inline void clk_gpio_3_intr_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);

	if (en) {
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_3_INTR_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_3_INTR_CLK;
	}

	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}

static __inline void clk_gpio_4_intr_en(int en)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);

	if (en) {
		reg |= GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_4_INTR_CLK;
	} else {
		reg &= ~GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_4_INTR_CLK;
	}

	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}

static __inline void aon_rtc_en(int en)			
{
	uint32_t reg = aon_read(AON_REG_PMU_MISC_CTRL);
	if (en) {
		reg |= AON_REG_PMU_MISC_CTRL_CTL_CLK_32K_RTC_EN;
	} else {
		reg &= ~AON_REG_PMU_MISC_CTRL_CTL_CLK_32K_RTC_EN;
	}
	aon_write(AON_REG_PMU_MISC_CTRL, reg);
}

static __inline int aon_is_rtc_en(void)			
{
	uint32_t reg = aon_read(AON_REG_PMU_MISC_CTRL);

	return ((reg & AON_REG_PMU_MISC_CTRL_CTL_CLK_32K_RTC_EN) ? 1: 0); 
}

static __inline void aon_rc_rtc_sw(int rtc)			
{
	uint32_t reg = aon_read(AON_REG_AON_MISC_CTRL);
	if (rtc) {
		reg |= AON_REG_AON_MISC_CTRL_AON_MISC_CTRL_SEL_AON_32K_CLK;
	} else {
		reg &= ~AON_REG_AON_MISC_CTRL_AON_MISC_CTRL_SEL_AON_32K_CLK;
	}
	aon_write(AON_REG_AON_MISC_CTRL, reg);
}

static __inline void clk_force_spiflash_ctl_clk(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_FORCE_ON_1);
	reg |= GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_SPIFLASH_CTRL_CLK;
	WR_WORD(GLOBAL_REG_CLK_FORCE_ON_1, reg);
}

static __inline void clk_force_dma_ctl_clks(int force_on)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_FORCE_ON_1);
	if (force_on) {
		reg |= GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_AHB_D0_HCLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_APB_D0_1_HCLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_APB_D0_2_HCLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_APB_D0_3_HCLK|	
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_ICM_DATA_CODE_RAM_CLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_DATA_CODE_SRAM_A_CLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_DATA_CODE_SRAM_B_CLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_DMAC_REQ_MUX_CLK;
		WR_WORD(GLOBAL_REG_CLK_FORCE_ON_1, reg);
		reg = RD_WORD(GLOBAL_REG_CLK_FORCE_ON_2);
		reg |= GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_0_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_1_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_2_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_3_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_4_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DMAC_0_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DMAC_1_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_D2_M2_AHB_HCLK;
		WR_WORD(GLOBAL_REG_CLK_FORCE_ON_2, reg);
	} else {
		reg &= ~(GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_AHB_D0_HCLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_APB_D0_1_HCLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_APB_D0_2_HCLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_APB_D0_3_HCLK|	
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_ICM_DATA_CODE_RAM_CLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_DATA_CODE_SRAM_A_CLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_DATA_CODE_SRAM_B_CLK|
					GLOBAL_REG_CLK_FORCE_ON_1_CTL_CLK_FORCE_ON_1_DMAC_REQ_MUX_CLK);
		WR_WORD(GLOBAL_REG_CLK_FORCE_ON_1, reg);
		reg = RD_WORD(GLOBAL_REG_CLK_FORCE_ON_2);
		reg &= ~(GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_0_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_1_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_2_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_3_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DC_RAM_4_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DMAC_0_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_DMAC_1_CLK|
					GLOBAL_REG_CLK_FORCE_ON_2_CTL_CLK_FORCE_ON_2_D2_M2_AHB_HCLK);
		WR_WORD(GLOBAL_REG_CLK_FORCE_ON_2, reg);
	}
							
}

static __inline void clk_cfg(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLK_CTRL_1);
	uint32_t reg1 = RD_WORD(EFUSECTRL_REG_INIT_RD_VALUE_0_0);
	uint32_t mux;

	/// XO cap code
	/// See efuse definition
	if ((reg1>> 17) & 1) {
		uint32_t reg2 = aon_read(0x1250);
		reg2 &= ~0xFF;
		reg2 |= (reg1>>18) & 0xFF;
		aon_write(0x1250, reg2);
	}

	if (CFG_ROOT_CLK == 64000000) {
		if (!(reg & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_64MXO_OR_32MRC))
			reg |= GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_64MXO_OR_32MRC;

		/// D0 doamin clock
		reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK;
		mux = CLK_D0_DIV2;
		if (CFG_D0_CLK == 16000000)
			mux = CLK_D0_DIV4;
		else if (CFG_D0_CLK == 8000000)
			mux = CLK_D0_DIV8;
		reg |= ((mux & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK_SHIFT);
		
		/// D2 domain clock
		reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK;
		mux = CLK_D2_DIV2;
		if (CFG_D2_CLK == 64000000)
			mux = CLK_D2_DIV1;
		else if (CFG_D2_CLK == 16000000)
			mux = CLK_D2_DIV4;
		else if (CFG_D2_CLK == 8000000)
			mux = CLK_D2_DIV8;
		reg |= ((mux & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK_SHIFT);

		/// D1 domain clock
		reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS;
		mux = CLK_D1_DIV2;
		if (CFG_D1_CLK == 16000000)
			mux = CLK_D1_DIV4;
		else if (CFG_D1_CLK == 8000000)
			mux = CLK_D1_DIV8;
		reg |= ((mux & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS_SHIFT);

	} else {
		if (reg & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_64MXO_OR_32MRC)
			reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_64MXO_OR_32MRC;

		/// D0 doamin clock
		reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK;
		mux = CLK_D0_DIV2;
		if (CFG_D0_CLK == 8000000)
			mux = CLK_D0_DIV4;
		else if (CFG_D0_CLK == 4000000)
			mux = CLK_D0_DIV8;
		reg |= ((mux & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D0_CLK_SHIFT);
		
		/// D2 domain clock
		reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK;
		mux = CLK_D2_DIV2;
		if (CFG_D2_CLK == 32000000)
			mux = CLK_D2_DIV1;
		else if (CFG_D2_CLK == 8000000)
			mux = CLK_D2_DIV4;
		else if (CFG_D2_CLK == 4000000)
			mux = CLK_D2_DIV8;
		reg |= ((mux & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D2_CLK_SHIFT);

		/// D1 domain clock
		reg &= ~GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS;
		mux = CLK_D1_DIV2;
		if (CFG_D1_CLK == 8000000)
			mux = CLK_D1_DIV4;
		else if (CFG_D1_CLK == 4000000)
			mux = CLK_D1_DIV8;
		reg |= ((mux & GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS_MASK) << GLOBAL_REG_CLK_CTRL_1_CTL_CLK_CTRL_1_SEL_D1_DIV2_4_8_CLKS_SHIFT);
	}

	WR_WORD(GLOBAL_REG_CLK_CTRL_1, reg);
}

static __inline void clk_off(void)
{
	uint32_t reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_1);
	reg &= ~(//GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_EFUSE_CLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_RXTX_SEQ_REGS_CLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_KEYBOARD_CLK_FREE|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_KEYBOARD_CLK_GATED|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SECURITY_CORE_PCLK|
		
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_SSI_MASTER1_SSI_CLK|
					//GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_INTRCTRL_CLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_SSI_SLAVE0_SSI_CLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_WDT_TCLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2C_0_IC_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2C_1_IC_CLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM0_PCLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM1_PCLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM2_PCLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM3_PCLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_PWM4_PCLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_COUNTER_TOP_PCLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_AURX_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_AUTX_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_64M_CLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_SADC_CLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2S_MASTER_SCLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_CPU_I_I2S_SLAVE_SCLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_SPK_CLK|GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_AUDIO_SD_CLK|
					GLOBAL_REG_CLKD0_ENABLE_1_CTL_CLKD0_ENABLE_1_32M_TTM);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_1, reg);

	reg = RD_WORD(GLOBAL_REG_CLKD0_ENABLE_2);
	reg &= ~(GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_CLK_QUADDEC|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_QUADDEC_TOP_PCLK|
	
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_CLK_EM|
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SADCCTRL_TOP_PCLK|
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_AUDIO_TOP_PCLK|
					//GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_DMAC_REQ_MUX_PCLK|
					//GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_EFUSECTRL_TOP_PCLK| 
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_KEYBOARD_TOP_PCLK|
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2C_0_PCLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2C_1_PCLK|
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2S_MASTER_PCLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_I2S_SLAVE_PCLK|
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SSI_MASTER1_PCLK|	GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SSI_SLAVE0_PCLK|		
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_UART_0_PCLK|
 GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_UART_1_PCLK|
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_WDT_PCLK|
	
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_FW_RAM_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_A_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_B_CLK|
					GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_C_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_ECC_MEM_D_CLK
					//GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_0_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_1_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_2_CLK|
					//GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_3_CLK|GLOBAL_REG_CLKD0_ENABLE_2_CTL_CLKD0_ENABLE_2_SHM_MEM_4_CLK
					);
	WR_WORD(GLOBAL_REG_CLKD0_ENABLE_2, reg);

	reg = RD_WORD(GLOBAL_REG_CLKD1_ENABLE_1);
	reg &= ~(GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_COUNTER_HCLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_AHBTRG_TOP_PCLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_MDM_CORE_CLK|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_MDM_PCLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_CLK_ANT|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_BB_MASTER1_GCLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_1_BLE_I_BB_MASTER_CLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_CLK_PLLTRIG_MEM|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_PCLK_PLLTRIG|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_PLLTRIG|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_CPU_I_CLK_AHBTRG|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_REGS_CLK|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_MAIN_CLK|GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_MAIN_CLK_FREE|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_TRXSEQ_I_CNTR_CLK|
					GLOBAL_REG_CLKD1_ENABLE_1_CTL_CLKD1_ENABLE_BLE_FE_PCLK);
	WR_WORD(GLOBAL_REG_CLKD1_ENABLE_1, reg);

	reg = RD_WORD(GLOBAL_REG_CLKD2_ENABLE_1);
	reg &= ~GLOBAL_REG_CLKD2_ENABLE_1_CTL_CLKD2_ENABLE_1_ROMCRC_CLK;
	WR_WORD(GLOBAL_REG_CLKD2_ENABLE_1, reg);

	reg = RD_WORD(GLOBAL_REG_CLK_ENABLE_1);
	reg &= ~(GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_CALIB_REG_CLK|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_CALIB_REF_CLK|
					//GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_SHAREDMEM_TOP_CLK|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_HWACC_MEM|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_HWACC_HCLK|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_MBIST_CTRL_1|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_MBIST_CTRL_2|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_MBIST_CTRL_3|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_MBIST_CTRL_4|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_MBIST_CTRL_5|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_MBIST_CTRL_6|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_MBIST_CTRL_7|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_CLK_EM2SHM|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_IPM_FREE|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_0_INTR_CLK|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_1_INTR_CLK|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_2_INTR_CLK|GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_3_INTR_CLK|
					GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_GPIO_4_INTR_CLK
					//GLOBAL_REG_CLK_ENABLE_1_CTL_CLK_ENABLE_1_EFUSE_1_CLK
					);
	WR_WORD(GLOBAL_REG_CLK_ENABLE_1, reg);
}


/*
 * Exported Functions
 ****************************************************************************************
 */

/**
 ****************************************************************************************
 * @brief Calibrate XO. 
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_calib_xo(void);

/**
 ****************************************************************************************
 * @brief Set Root clock. 
 *
 * @param[in] clk_root					Either XO (64000000) or RC (32000000).
 *
 * @return  NULL
 ****************************************************************************************
 */
int hal_clk_root_set(uint32_t clk_root);

/**
 ****************************************************************************************
 * @brief Get Root clock. 
 *
 *
 * @return  Root clock
 ****************************************************************************************
 */
uint32_t hal_clk_root_get(void);


/**
 ****************************************************************************************
 * @brief Set CPU clock. 
 *
 * @param[in] cpu_clk					XO: 64000000, 32000000, 16000000, and 8000000, RC: 32000000, 16000000, 8000000, 4000000			
 *
 * @return  NULL
 ****************************************************************************************
 */
int hal_clk_cpu_set(uint32_t cpu_clk);

/**
 ****************************************************************************************
 * @brief Get CPU clock. 
 *
 *
 * @return  CPU clock
 ****************************************************************************************
 */
uint32_t hal_clk_cpu_get(void);

/**
 ****************************************************************************************
 * @brief Set D0 domain clock. 
 *
 * @param[in] d0_clk			XO: 32000000, 16000000, and 8000000, RC: 16000000, 8000000, 4000000			
 *
 * @return  NULL
 ****************************************************************************************
 */
int hal_clk_d0_set(uint32_t d0_clk);

/**
 ****************************************************************************************
 * @brief Get D0 domanin clock. 
 *
 *
 * @return  D0 domain clock
 ****************************************************************************************
 */
uint32_t hal_clk_d0_get(void);

/**
 ****************************************************************************************
 * @brief Set D1 domain clock. 
 *
 * @param[in] d1_clk			XO: 32000000, 16000000, and 8000000, RC: 16000000, 8000000, 4000000			
 *
 * @return  NULL
 ****************************************************************************************
 */
int hal_clk_d1_set(uint32_t d1_clk);

/**
 ****************************************************************************************
 * @brief Get D1 domanin clock. 
 *
 *
 * @return  D1 domain clock
 ****************************************************************************************
 */
uint32_t hal_clk_d1_get(void);

/**
 ****************************************************************************************
 * @brief Set D2 domain clock. 
 *
 * @param[in] d2_clk			XO: 64000000, 32000000, 16000000, and 8000000, RC: 32000000, 16000000, 8000000, 4000000			
 *
 * @return  NULL
 ****************************************************************************************
 */
int hal_clk_d2_set(uint32_t d2_clk);

/**
 ****************************************************************************************
 * @brief Get D2 domanin clock. 
 *
 *
 * @return  D2 domain clock
 ****************************************************************************************
 */
uint32_t hal_clk_d2_get(void);

/**
 ****************************************************************************************
 * @brief Set Timer 1 clock. 
 *
 * @param[in] tim1_clk			XO: 16000000, 8000000, and 4000000, RC: 8000000, 4000000, and 2000000			
 *
 * @return  NULL
 ****************************************************************************************
 */
int hal_clk_tim1_set(uint32_t tim1_clk);

/**
 ****************************************************************************************
 * @brief Get Timer 1 clock. 
 *
 *
 * @return  Timer 1 clock
 ****************************************************************************************
 */
uint32_t hal_clk_tim1_get(void);

/**
 ****************************************************************************************
 * @brief Set Timer 2 clock. 
 *
 * @param[in] rtc_clk			1: Use RTC clock, 0: Use internal RC			
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_tim2_set(int rtc_clk);

/**
 ****************************************************************************************
 * @brief Set HW accelerator clock. 
 *
 * @param[in] hwacc_clk			XO: 
 *													- 64000000, 
 *													- 32000000, 
 *													- 16000000, 
 *													- 8000000, 
 *												RC: 
 *													- 32000000, 
 *													- 16000000, 
 *													- 8000000, 
 *													- 4000000.			
 *
 * @return CLK_ERR_NO_ERROR if successful, otherwise @see enum clk_error.
 ****************************************************************************************
 */
int hal_clk_hwacc_set(uint32_t hwacc_clk);

/**
 ****************************************************************************************
 * @brief Set Sensor ADC clock. 
 *
 * @param[in] sadc_clk			XO: 
 *												- 16000000, 
 *												- 8000000, 
 *												- 4000000, 
 *												- 2000000, 
 *												- 1000000, 
 *											RC: 
 *												- 8000000, 
 *												- 4000000, 
 *												- 2000000, 
 *												- 1000000.			
 *
 * @return  CLK_ERR_NO_ERROR if successful, otherwise @see enum clk_error.
 ****************************************************************************************
 */
int hal_clk_sadc_set(uint32_t sadc_clk);

/**
 ****************************************************************************************
 * @brief Get SADC clock. 
 *
 *
 * @return  SADC clock
 ****************************************************************************************
 */
uint32_t hal_clk_sadc_get(void);

/**
 ****************************************************************************************
 * @brief Set Shared memory clock. 
 *
 * @param[in] smem_clk		XO: 
 *												- 64000000, 
 *												- 32000000, 
 *												- 16000000, 
 *												- 8000000, 
 *											RC: 
 *												- 32000000, 
 *												- 16000000, 
 *												- 8000000, 
 *												- 4000000.			
 *
 * @return CLK_ERR_NO_ERROR if successful, otherwise @see enum clk_error.
 ****************************************************************************************
 */
int hal_clk_smem_set(uint32_t smem_clk);

/**
 ****************************************************************************************
 * @brief Set QSPI speed clock. 
 *
 * @param[in] qspi_clk			XO: 
 *												- 64000000, 
 *												- 32000000, 
 *												- 16000000, 
 *												- 8000000, 
 *											RC: 
 *												- 32000000, 
 *												- 16000000, 
 *												- 8000000, 
 *												- 4000000.			
 *
 * @return  CLK_ERR_NO_ERROR if successful, otherwise @see enum clk_error.
 ****************************************************************************************
 */
int hal_clk_qspi_set(uint32_t qspi_clk);

/**
 ****************************************************************************************
 * @brief Get QSPI clock. 
 *
 *
 * @return  QSPI clock
 ****************************************************************************************
 */
uint32_t hal_clk_qspi_get(void);

/**
 ****************************************************************************************
 * @brief Set Efuse clock. 
 *
 * @param[in] efuse_clk		XO: 
 *												- 16000000, 
 *												- 8000000, 
 *											RC: 
 *												- 8000000, 
 *												- 4000000.			
 *
 * @return  NULL
 ****************************************************************************************
 */
int hal_clk_efuse_set(uint32_t efuse_clk);

/**
 ****************************************************************************************
 * @brief Set Slave I2S clock source. 
 *
 * @param[in] ext_clk		1: From external, 0: From  internal.
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_si2s_set(int ext_clk);

/**
 ****************************************************************************************
 * @brief Set Master I2S bit clock 
 *
 * @param[in] bit_clk		Serial bit clock
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_mi2s_set(uint32_t bit_clk);

/**
 ****************************************************************************************
 * @brief Set Codec clock source 
 *
 * @param[in] mux			0: I2S master clock
 *										1: I2S slave clock
 *										2: PDM clock
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_audio_codec(int mux);

/**
 ****************************************************************************************
 * @brief  Enable or disable Efuse clock  
 *
 * @param[in] en				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_efuse_en(int en);

/**
 ****************************************************************************************
 * @brief  Enable or disable Uart clock  
 *
 * @param[in] id				Uart Id, @see enum uart_id
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_uart_en(int id, int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable I2c clock  
 *
 * @param[in] id				I2c Id, @see enum i2c_id
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_i2c_en(int id, int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable PWM clock  
 *
 * @param[in] id				PWM Id, @see enum pwm_id
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_pwm_en(int id, int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable Watch Dog Timer clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_wdt_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable keyboard clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_kb_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable ECC clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_ecc_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable hash clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_hash_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable AES clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_aes_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable counter clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_counter_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable audio clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_audio_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable sensor ADC clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_sadc_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable I2S clock  
 *
 * @param[in] id				I2S Id, @see enum i2s_id
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_i2s_en(int id, int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable QD clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_quaddec_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable DMA clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_dma_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable BLE clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_ble_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable GPIO interrupt controller clock  
 *
 * @param[in] port			Port number, @see enum gpio_port
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_gpio_intr(int port, int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable master SPI clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_mspi_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable or disable slave SPI clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_sspi_en(int on);

/**
 ****************************************************************************************
 * @brief  Enable RTC clock  
 *
 * @param[in] on				1: Enable, 0: otherwise
 *
 * @return  NULL
 ****************************************************************************************
 */
void hal_clk_rtc_en(int en);

/**
 ****************************************************************************************
 * @brief  Check if RTC is ready. 
 *
 *
 * @return  1: RTC ready, 0: Otherwise
 ****************************************************************************************
 */
int hal_clk_rtc_ready(void);

/**
 ****************************************************************************************
 * @brief  Get RTC clock rate. 
 *
 *
 * @return  RTC clock rate.
 ****************************************************************************************
 */
uint32_t hal_clk_rtc_get(void);

/**
 ****************************************************************************************
 * @brief  Calibrate RC timer. 
 *
 * @param[in] cycles				Calibrate cycles (2 ^ cycles)
 *
 * @return NULL
 ****************************************************************************************
 */

void hal_clk_calib_rc(int cycles);


/// @} HAL_CLK

#endif	// HAL_CLK_H
