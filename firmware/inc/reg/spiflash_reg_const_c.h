/////////////////////////////////////////////////////////////////////////////////
// This file has been automatically generated by register_slave.pl version dc9b7d3
/////////////////////////////////////////////////////////////////////////////////

// type declaration
#ifndef __REG_CONST_T
#define __REG_CONST_T

#ifndef REG_CONST_NAME_STRING_MAX_LEN   
#define REG_CONST_NAME_STRING_MAX_LEN 64
#endif // REG_CONST_NAME_STRING_MAX_LEN
#ifndef REG_CONST_DESC_STRING_MAX_LEN
#define REG_CONST_DESC_STRING_MAX_LEN 512
#endif // REG_CONST_DESC_STRING_MAX_LEN
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	DWORD address;
	DWORD def;
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} reg_const_t;
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	char range[32];
	char def[32];
	char access[32];
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} field_const_t;
typedef struct {
	field_const_t *pfield;
	DWORD size;
} field_const_array_t;
#endif // __REG_CONST_T

#define NUM_REGS__SPIFLASH_REG  25
/* { reg_const_spiflash_reg, 25, "spiflash_reg"},  */ 
static reg_const_t reg_const_spiflash_reg[NUM_REGS__SPIFLASH_REG] = {
  {/* name */ "intr_status", /* address */ 0x44107000, /* default */ 0x00000000, /* description */ "Interrupt status register bits. \n"}, 
  {/* name */ "intr_mask_status", /* address */ 0x44107004, /* default */ 0x00000000, /* description */ "Interrupt mask status register\n"}, 
  {/* name */ "intr_clr", /* address */ 0x44107008, /* default */ 0x00000000, /* description */ "Clear interrupt status\n"}, 
  {/* name */ "intr_set", /* address */ 0x4410700c, /* default */ 0x00000000, /* description */ "Set interrupt status\n"}, 
  {/* name */ "intr_mask_set", /* address */ 0x44107010, /* default */ 0x00000000, /* description */ "Set interrupt mask\n"}, 
  {/* name */ "intr_mask_clr", /* address */ 0x44107014, /* default */ 0x00000000, /* description */ "Set interrupt mask\n"}, 
  {/* name */ "spiflash_misc_ctrl", /* address */ 0x44107020, /* default */ 0x00000000, /* description */ "Basic control register\n"}, 
  {/* name */ "spiflash_addr_offset", /* address */ 0x44107028, /* default */ 0x00000000, /* description */ "SPI flash address offset\n"}, 
  {/* name */ "spiflash_cont_mode_ctrl", /* address */ 0x4410702c, /* default */ 0x00000000, /* description */ "SPI flash address offset\n"}, 
  {/* name */ "spiflash_instruction", /* address */ 0x44107030, /* default */ 0x00000000, /* description */ "Instruction to SPI flash \n"}, 
  {/* name */ "spiflash_slv_sel", /* address */ 0x44107040, /* default */ 0x00000000, /* description */ "Slave selection for spiflash\n"}, 
  {/* name */ "spi_flash_rd_addr", /* address */ 0x44107060, /* default */ 0x00000000, /* description */ "Read address (a write will trigger a request)\n"}, 
  {/* name */ "spi_flash_curr_rd_addr", /* address */ 0x44107064, /* default */ 0x00000000, /* description */ "Current read address\n"}, 
  {/* name */ "spi_flash_curr_rd_val_0", /* address */ 0x44107080, /* default */ 0x00000000, /* description */ "Current read value [31:0]\n"}, 
  {/* name */ "spi_flash_curr_rd_val_1", /* address */ 0x44107084, /* default */ 0x00000000, /* description */ "Current read value [63:32]\n"}, 
  {/* name */ "spi_flash_curr_rd_val_2", /* address */ 0x44107088, /* default */ 0x00000000, /* description */ "Current read value [95:64]\n"}, 
  {/* name */ "spi_flash_curr_rd_val_3", /* address */ 0x4410708c, /* default */ 0x00000000, /* description */ "Current read value [127:96]\n"}, 
  {/* name */ "spi_flash_cntr_state", /* address */ 0x441070a0, /* default */ 0x00000000, /* description */ "Current state of the flash cntr state\n"}, 
  {/* name */ "ssi_clk_ratio", /* address */ 0x441070b0, /* default */ 0x00000000, /* description */ "SPI master clock ratio \n"}, 
  {/* name */ "icache_dec_misc_ctrl", /* address */ 0x441070c0, /* default */ 0x00000000, /* description */ "Misc control for icache read decryption\n"}, 
  {/* name */ "reg_enc_misc_ctrl", /* address */ 0x441070d0, /* default */ 0x00000000, /* description */ "Encryption/decryption control for data enc/dec through registers\n"}, 
  {/* name */ "reg_enc_addr", /* address */ 0x441070d4, /* default */ 0x00000000, /* description */ "Address for encryption\n"}, 
  {/* name */ "reg_enc_curr_addr", /* address */ 0x441070d8, /* default */ 0x00000000, /* description */ "Current address for encryption\n"}, 
  {/* name */ "reg_enc_dec_val", /* address */ 0x441070e0, /* default */ 0x00000000, /* description */ "Value to be encrypted/decrypted\n"}, 
  {/* name */ "reg_enc_dec_result", /* address */ 0x441070e4, /* default */ 0x00000000, /* description */ "Encryption/decryption results\n"}
};

field_const_t field_const_spiflash_reg__intr_status[]  = {
  {/* name */ "err_apb_access_during_disable", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "APB access to SPI master detected when it is disabled\n"}, 
  {/* name */ "err_cache_access_during_disable", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-only", /* description */ "Cache (through cache or control register) access to SPI master detected when it is disabled\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__intr_mask_status[]  = {
  {/* name */ "err_apb_access_during_disable", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "APB access to SPI master detected when it is disabled\n"}, 
  {/* name */ "err_cache_access_during_disable", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-only", /* description */ "Cache (through cache or control register) access to SPI master detected when it is disabled\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__intr_clr[]  = {
  {/* name */ "err_apb_access_during_disable", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "APB access to SPI master detected when it is disabled\n"}, 
  {/* name */ "err_cache_access_during_disable", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "Cache (through cache or control register) access to SPI master detected when it is disabled\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__intr_set[]  = {
  {/* name */ "err_apb_access_during_disable", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "APB access to SPI master detected when it is disabled\n"}, 
  {/* name */ "err_cache_access_during_disable", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "Cache (through cache or control register) access to SPI master detected when it is disabled\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__intr_mask_set[]  = {
  {/* name */ "err_apb_access_during_disable", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "APB access to SPI master detected when it is disabled\n"}, 
  {/* name */ "err_cache_access_during_disable", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "Cache (through cache or control register) access to SPI master detected when it is disabled\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__intr_mask_clr[]  = {
  {/* name */ "err_apb_access_during_disable", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "APB access to SPI master detected when it is disabled\n"}, 
  {/* name */ "err_cache_access_during_disable", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "Cache (through cache or control register) access to SPI master detected when it is disabled\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__spiflash_misc_ctrl[]  = {
  {/* name */ "ctl_spi_apb_mux_sel", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 - regular SPI master APB access, 1 - SPI master APB access through cache\n"}, 
  {/* name */ "ctl_spi_flash_mode_continous", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_spi_flash_no_instruction_mode", /* range */ "[2:2]", /* default */ "0x0", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_spi_flash_endian_prdata_swap", /* range */ "[3:3]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set, swap prdata internal endian will be swapped.\n"}, 
  {/* name */ "ctl_spi_flash_addr_length", /* range */ "[7:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "Address field length for Flash through SPI\n"}, 
  {/* name */ "ctl_spi_wait_cycle", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "SPI wait cycles in continuous read mode \n"}, 
  {/* name */ "ctl_spi_trans_type", /* range */ "[13:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "SPI trans type: \n\n00 - Instruction and Address will be sent in Standard SPI Mode. \n\n01 - Instruction will be sent in Standard SPI Mode and Address will be sent \nin the mode specified by CTRLR0.SPI_FRF. \n\n10 - Both Instruction and Address will be sent in the mode specified by  \nCTRLR0.SPI_FRF. \n\n\n"}, 
  {/* name */ "ctl_spi_flash_addr_src", /* range */ "[16:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 - address will be set by control registers. 1 - address will be set by cache block\n"}, 
  {/* name */ "ctl_intr_reset", /* range */ "[20:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "Reset interrupt controller\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:21]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__spiflash_addr_offset[]  = {
  {/* name */ "ctl_spi_flash_addr_offset", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Address offset added to icache address\n"}
};
field_const_t field_const_spiflash_reg__spiflash_cont_mode_ctrl[]  = {
  {/* name */ "ctl_spiflash_cont_mode_byte", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Additional byte to attached at the end of the address\n"}, 
  {/* name */ "ctl_spiflash_attach_cont_mode_byte", /* range */ "[8:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set, the additional byte will be attached to the end of the address (even not in continuous mode)\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:9]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__spiflash_instruction[]  = {
  {/* name */ "ctl_spi_flash_instruction", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Instruction to send to SPI flash\n"}
};
field_const_t field_const_spiflash_reg__spiflash_slv_sel[]  = {
  {/* name */ "ctl_spi_flash_slave_sel", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "0001 - ssn 0, 0010 - ssn 1, 0100 - ssn 2, 1000 - ssn 3\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:4]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__spi_flash_rd_addr[]  = {
  {/* name */ "ctl_spi_flash_rd_addr", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Read request address\n"}
};
field_const_t field_const_spiflash_reg__spi_flash_curr_rd_addr[]  = {
  {/* name */ "sts_spi_flash_curr_rd_addr", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current read request address\n"}
};
field_const_t field_const_spiflash_reg__spi_flash_curr_rd_val_0[]  = {
  {/* name */ "value", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current read value\n"}
};
field_const_t field_const_spiflash_reg__spi_flash_curr_rd_val_1[]  = {
  {/* name */ "value", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current read value\n"}
};
field_const_t field_const_spiflash_reg__spi_flash_curr_rd_val_2[]  = {
  {/* name */ "value", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current read value\n"}
};
field_const_t field_const_spiflash_reg__spi_flash_curr_rd_val_3[]  = {
  {/* name */ "value", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current read value\n"}
};
field_const_t field_const_spiflash_reg__spi_flash_cntr_state[]  = {
  {/* name */ "sts_spi_flash_cntr_fsm_state", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current FSM state\n\n0x01 = RESET  \n\n0x10 = WAIT_APB_DISABLE_SPI_S0  \n\n0x11 = WAIT_APB_DISABLE_SPI_S1  \n\n0x12 = WAIT_APB_SPI_CTRLR_S0  \n\n0x13 = WAIT_APB_SPI_CTRLR_S1  \n\n0x14 = WAIT_APB_NUM_WORDS_S0  \n\n0x15 = WAIT_APB_NUM_WORDS_S1  \n\n0x16 = WAIT_APB_SLAVE_SELECT_S0  \n\n0x17 = WAIT_APB_SLAVE_SELECT_S1  \n\n0x18 = WAIT_APB_ENABLE_SPI_S0  \n\n0x19 = WAIT_APB_ENABLE_SPI_S1  \n\n0x1A = WAIT_APB_DR_INSTR_S0  \n\n0x1B = WAIT_APB_DR_INSTR_S1  \n\n0x1C = WAIT_APB_DR_ADDR_S0  \n\n0x1D = WAIT_APB_DR_ADDR_S1  \n\n0x20 = WAIT_SSI_INTR  \n\n0x30 = WAIT_APB_READ_S0  \n\n0x31 = WAIT_APB_READ_S1  \n\n0xF0 = IDLE  \n\n\n"}, 
  {/* name */ "sts_spi_flash_cntr_apb_state", /* range */ "[10:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current APB state\n\n0x0 = APB_IDLE \n\n0x1 = WRITE_APB_S0 \n\n0x2 = WRITE_APB_S1 \n\n0x3 = READ_APB_S0 \n\n0x4 = READ_APB_S1 \n\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:11]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__ssi_clk_ratio[]  = {
  {/* name */ "ctl_ssi_2_d0_clk_ratio", /* range */ "[1:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 - same clock, 1 - 2x, 2 - 4x, 3 - 8x\n"}, 
  {/* name */ "ctl_ssi_2_cache_clk_ratio", /* range */ "[5:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 - same clock, 1 - 2x, 2 - 4x, 3 - 8x\n"}, 
  {/* name */ "ctl_ssi_2_d0_clk_ratio_manual", /* range */ "[8:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "Manually set SSI to d0 clock ratio using bit [1:0] in this register\n"}, 
  {/* name */ "ctl_ssi_2_cache_clk_ratio_manual", /* range */ "[9:9]", /* default */ "0x0", /* access */ "read-write", /* description */ "Manually set SSI to cache clock ratio using bit [1:0] in this register\n"}, 
  {/* name */ "sts_ssi_2_d0_clk_ratio_auto", /* range */ "[13:12]", /* default */ "0x0", /* access */ "read-only", /* description */ "Currently auto detected SSI to d0 clock ratio\n"}, 
  {/* name */ "sts_ssi_2_cache_clk_ratio_auto", /* range */ "[17:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "Currently auto detected SSI to cache clock ratio\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:18]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__icache_dec_misc_ctrl[]  = {
  {/* name */ "ctl_flash_data_enc_en", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Enable decryption through icache read\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:1]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__reg_enc_misc_ctrl[]  = {
  {/* name */ "ctl_reg_enc_dec_en", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Enable register data encryption/decryption\n"}, 
  {/* name */ "ctl_reg_enc0dec1", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "0 - encryption, 1 - decryption\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_spiflash_reg__reg_enc_addr[]  = {
  {/* name */ "ctl_reg_enc_init_addr", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Initial address for encryption/decryption\n"}
};
field_const_t field_const_spiflash_reg__reg_enc_curr_addr[]  = {
  {/* name */ "sts_reg_enc_curr_addr", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current address for encryption/decryption\n"}
};
field_const_t field_const_spiflash_reg__reg_enc_dec_val[]  = {
  {/* name */ "ctl_reg_enc_data", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Data to be encrypted/decrypted. A write will automatically increase current address by 1.\n"}
};
field_const_t field_const_spiflash_reg__reg_enc_dec_result[]  = {
  {/* name */ "sts_reg_enc_result", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Encryption/decryption results\n"}
};

field_const_array_t reg_pnt_list__spiflash_reg[NUM_REGS__SPIFLASH_REG] = {
  { /* pfield */ field_const_spiflash_reg__intr_status, /* size */ 3}, 
  { /* pfield */ field_const_spiflash_reg__intr_mask_status, /* size */ 3}, 
  { /* pfield */ field_const_spiflash_reg__intr_clr, /* size */ 3}, 
  { /* pfield */ field_const_spiflash_reg__intr_set, /* size */ 3}, 
  { /* pfield */ field_const_spiflash_reg__intr_mask_set, /* size */ 3}, 
  { /* pfield */ field_const_spiflash_reg__intr_mask_clr, /* size */ 3}, 
  { /* pfield */ field_const_spiflash_reg__spiflash_misc_ctrl, /* size */ 10}, 
  { /* pfield */ field_const_spiflash_reg__spiflash_addr_offset, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__spiflash_cont_mode_ctrl, /* size */ 3}, 
  { /* pfield */ field_const_spiflash_reg__spiflash_instruction, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__spiflash_slv_sel, /* size */ 2}, 
  { /* pfield */ field_const_spiflash_reg__spi_flash_rd_addr, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__spi_flash_curr_rd_addr, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__spi_flash_curr_rd_val_0, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__spi_flash_curr_rd_val_1, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__spi_flash_curr_rd_val_2, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__spi_flash_curr_rd_val_3, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__spi_flash_cntr_state, /* size */ 3}, 
  { /* pfield */ field_const_spiflash_reg__ssi_clk_ratio, /* size */ 7}, 
  { /* pfield */ field_const_spiflash_reg__icache_dec_misc_ctrl, /* size */ 2}, 
  { /* pfield */ field_const_spiflash_reg__reg_enc_misc_ctrl, /* size */ 3}, 
  { /* pfield */ field_const_spiflash_reg__reg_enc_addr, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__reg_enc_curr_addr, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__reg_enc_dec_val, /* size */ 1}, 
  { /* pfield */ field_const_spiflash_reg__reg_enc_dec_result, /* size */ 1}
};
