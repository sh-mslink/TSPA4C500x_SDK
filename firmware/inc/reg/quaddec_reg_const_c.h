/////////////////////////////////////////////////////////////////////////////////
// This file has been automatically generated by register_slave.pl version 73bb090
/////////////////////////////////////////////////////////////////////////////////

// type declaration
#ifndef __REG_CONST_T
#define __REG_CONST_T

#ifndef REG_CONST_NAME_STRING_MAX_LEN   
#define REG_CONST_NAME_STRING_MAX_LEN 64
#endif // REG_CONST_NAME_STRING_MAX_LEN
#ifndef REG_CONST_DESC_STRING_MAX_LEN
#define REG_CONST_DESC_STRING_MAX_LEN 512
#endif // REG_CONST_DESC_STRING_MAX_LEN
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	DWORD address;
	DWORD def;
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} reg_const_t;
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	char range[32];
	char def[32];
	char access[32];
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} field_const_t;
typedef struct {
	field_const_t *pfield;
	DWORD size;
} field_const_array_t;
#endif // __REG_CONST_T

#define NUM_REGS__QUADDEC_REG  28
/* { reg_const_quaddec_reg, 28, "quaddec_reg"},  */ 
static reg_const_t reg_const_quaddec_reg[NUM_REGS__QUADDEC_REG] = {
  {/* name */ "interrupt_status", /* address */ 0x4411f000, /* default */ 0x00000000, /* description */ "Interrupt status register bits. \n"}, 
  {/* name */ "interrupt_mask_status", /* address */ 0x4411f004, /* default */ 0x00000000, /* description */ "Interrupt mask status register\n"}, 
  {/* name */ "interrupt_clear", /* address */ 0x4411f008, /* default */ 0x00000000, /* description */ ""}, 
  {/* name */ "interrupt_set", /* address */ 0x4411f00c, /* default */ 0x00000000, /* description */ "Set interrupt status\n"}, 
  {/* name */ "interrupt_mask_set", /* address */ 0x4411f010, /* default */ 0x00000000, /* description */ "Set interrupt mask\n"}, 
  {/* name */ "interrupt_mask_clear", /* address */ 0x4411f014, /* default */ 0x00000000, /* description */ "Set interrupt mask\n"}, 
  {/* name */ "misc_ctrl", /* address */ 0x4411f020, /* default */ 0x14700700, /* description */ "Basic control register\n"}, 
  {/* name */ "interval_setting", /* address */ 0x4411f024, /* default */ 0x00100000, /* description */ "Sample interval and LED early start interval\n"}, 
  {/* name */ "input_pin_assignment0", /* address */ 0x4411f040, /* default */ 0x00000230, /* description */ "Input pin assignment of A, B, and INDEX.\n"}, 
  {/* name */ "input_pin_assignment1", /* address */ 0x4411f044, /* default */ 0x00000230, /* description */ "Input pin assignment of A, B, and INDEX.\n"}, 
  {/* name */ "input_pin_assignment2", /* address */ 0x4411f048, /* default */ 0x00000230, /* description */ "Input pin assignment of A, B, and INDEX.\n"}, 
  {/* name */ "report_interval", /* address */ 0x4411f04c, /* default */ 0x00000000, /* description */ "How many samples the counter value in the register will be updated (and an counter ready interrupt triggered)\n"}, 
  {/* name */ "counter_lmt", /* address */ 0x4411f050, /* default */ 0x80007fff, /* description */ "Counter overflow/underflow limit. This is the maximal/minimal number a counter can have\n"}, 
  {/* name */ "counter_init", /* address */ 0x4411f054, /* default */ 0x00000000, /* description */ "Counter reset value\n"}, 
  {/* name */ "counter_clear", /* address */ 0x4411f05c, /* default */ 0x00000000, /* description */ "Clear counter values\n"}, 
  {/* name */ "sample_counter0", /* address */ 0x4411f060, /* default */ 0x00000000, /* description */ "counter value and double displacement counter value\n"}, 
  {/* name */ "sample_counter1", /* address */ 0x4411f064, /* default */ 0x00000000, /* description */ "counter value and double displacement counter value\n"}, 
  {/* name */ "sample_counter2", /* address */ 0x4411f068, /* default */ 0x00000000, /* description */ "counter value and double displacement counter value\n"}, 
  {/* name */ "db_counter_and_current_input0", /* address */ 0x4411f06c, /* default */ 0x00000000, /* description */ "counter value and double displacement counter value\n"}, 
  {/* name */ "db_counter_and_current_input1", /* address */ 0x4411f070, /* default */ 0x00000000, /* description */ "counter value and double displacement counter value\n"}, 
  {/* name */ "db_counter_and_current_input2", /* address */ 0x4411f074, /* default */ 0x00000000, /* description */ "counter value and double displacement counter value\n"}, 
  {/* name */ "index_ctrl", /* address */ 0x4411f078, /* default */ 0x00000001, /* description */ "index pin behaviour control\n"}, 
  {/* name */ "index_counter0", /* address */ 0x4411f07c, /* default */ 0x00000000, /* description */ "counters related to index\n"}, 
  {/* name */ "index_counter1", /* address */ 0x4411f080, /* default */ 0x00000000, /* description */ "counters related to index\n"}, 
  {/* name */ "index_counter2", /* address */ 0x4411f084, /* default */ 0x00000000, /* description */ "counters related to index\n"}, 
  {/* name */ "interval_led_setting_m0", /* address */ 0x4411f088, /* default */ 0x00000000, /* description */ "LED early start interval\n"}, 
  {/* name */ "interval_led_setting_m1", /* address */ 0x4411f08c, /* default */ 0x00000000, /* description */ "LED early start interval\n"}, 
  {/* name */ "interval_led_setting_m2", /* address */ 0x4411f090, /* default */ 0x00000000, /* description */ "LED early start interval\n"}
};

field_const_t field_const_quaddec_reg__interrupt_status[]  = {
  {/* name */ "counter", /* range */ "[23:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "name: counter_value_ready0\nbit_range: [0:0]\nfield_reset_value: 0x0\ndescription: Counter value is ready to read out\nname: counter_overflow0\nbit_range: [1:1]\nfield_reset_value: 0x0\ndescription: Counter overflow\nname: counter_underflow0\nbit_range: [2:2]\nfield_reset_value: 0x0\ndescription: Counter underflow\nname: index_received0\nbit_range: [3:3]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received\nname: index_received_error0\nbit_range: [4:4]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received while the A/B pattern doesn't match\nname: double_displacement_error0\nbit_range: [5:5]\nfield_reset_value: 0x0\ndescription: Double displacement detected (A and B change at the same time)\nname: double_displacement_counter_overflow0\nbit_range: [6:6]\nfield_reset_value: 0x0\ndescription: Double displacement counter overflow\nname: counter_value_ready1\nbit_range: [8:8]\nfield_reset_value: 0x0\ndescription: Counter value is ready to read out\nname: counter_overflow1\nbit_range: [9:9]\nfield_reset_value: 0x0\ndescription: Counter overflow\nname: counter_underflow1\nbit_range: [10:10]\nfield_reset_value: 0x0\ndescription: Counter underflow\nname: index_received1\nbit_range: [11:11]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received\nname: index_received_error1\nbit_range: [12:12]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received while the A/B pattern doesn't match\nname: double_displacement_error1\nbit_range: [13:13]\nfield_reset_value: 0x0\ndescription: Double displacement detected (A and B change at the same time)\nbit_range: [14:14]\nfield_reset_value: 0x0\ndescription: Double displacement counter overflow\nname: counter_value_ready2\nbit_range: [16:16]\nfield_reset_value: 0x0\ndescription: Counter value is ready to read out\nname: counter_overflow2\nbit_range: [17:17]\nfield_reset_value: 0x0\ndescription: Counter overflow\nname: counter_underflow2\nbit_range: [18:18]\nfield_reset_value: 0x0\ndescription: Counter underflow\nname: index_received2\nbit_range: [19:19]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received\nname: index_received_error2\nbit_range: [20:20]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received while the A/B pattern doesn't match\nname: double_displacement_error2\nbit_range: [21:21]\nfield_reset_value: 0x0\ndescription: Double displacement detected (A and B change at the same time)\nname: double_displacement_counter_overflow2\nbit_range: [22:22]\nfield_reset_value: 0x0\ndescription: Double displacement counter overflow\n\n"}
};
field_const_t field_const_quaddec_reg__interrupt_mask_status[]  = {
  {/* name */ "counter", /* range */ "[23:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "name: counter_value_ready0\nbit_range: [0:0]\nfield_reset_value: 0x0\ndescription: Counter value is ready to read out\nname: counter_overflow0\nbit_range: [1:1]\nfield_reset_value: 0x0\ndescription: Counter overflow\nname: counter_underflow0\nbit_range: [2:2]\nfield_reset_value: 0x0\ndescription: Counter underflow\nname: index_received0\nbit_range: [3:3]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received\nname: index_received_error0\nbit_range: [4:4]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received while the A/B pattern doesn't match\nname: double_displacement_error0\nbit_range: [5:5]\nfield_reset_value: 0x0\ndescription: Double displacement detected (A and B change at the same time)\nname: double_displacement_counter_overflow0\nbit_range: [6:6]\nfield_reset_value: 0x0\ndescription: Double displacement counter overflow\nname: counter_value_ready1\nbit_range: [8:8]\nfield_reset_value: 0x0\ndescription: Counter value is ready to read out\nname: counter_overflow1\nbit_range: [9:9]\nfield_reset_value: 0x0\ndescription: Counter overflow\nname: counter_underflow1\nbit_range: [10:10]\nfield_reset_value: 0x0\ndescription: Counter underflow\nname: index_received1\nbit_range: [11:11]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received\nname: index_received_error1\nbit_range: [12:12]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received while the A/B pattern doesn't match\nname: double_displacement_error1\nbit_range: [13:13]\nfield_reset_value: 0x0\ndescription: Double displacement detected (A and B change at the same time)\nbit_range: [14:14]\nfield_reset_value: 0x0\ndescription: Double displacement counter overflow\nname: counter_value_ready2\nbit_range: [16:16]\nfield_reset_value: 0x0\ndescription: Counter value is ready to read out\nname: counter_overflow2\nbit_range: [17:17]\nfield_reset_value: 0x0\ndescription: Counter overflow\nname: counter_underflow2\nbit_range: [18:18]\nfield_reset_value: 0x0\ndescription: Counter underflow\nname: index_received2\nbit_range: [19:19]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received\nname: index_received_error2\nbit_range: [20:20]\nfield_reset_value: 0x0\ndescription: INDEX signal pulse received while the A/B pattern doesn't match\nname: double_displacement_error2\nbit_range: [21:21]\nfield_reset_value: 0x0\ndescription: Double displacement detected (A and B change at the same time)\nname: double_displacement_counter_overflow2\nbit_range: [22:22]\nfield_reset_value: 0x0\ndescription: Double displacement counter overflow\n\n"}
};
field_const_t field_const_quaddec_reg__interrupt_clear[]  = {
  {/* name */ "counter", /* range */ "[23:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear interrupt status\n"}
};
field_const_t field_const_quaddec_reg__interrupt_set[]  = {
  {/* name */ "counter", /* range */ "[23:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear interrupt status\n"}
};
field_const_t field_const_quaddec_reg__interrupt_mask_set[]  = {
  {/* name */ "counter", /* range */ "[23:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear interrupt status\n"}
};
field_const_t field_const_quaddec_reg__interrupt_mask_clear[]  = {
  {/* name */ "counter", /* range */ "[23:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear interrupt status\n"}
};
field_const_t field_const_quaddec_reg__misc_ctrl[]  = {
  {/* name */ "ctl_quaddec_enable", /* range */ "[2:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Enable each quadrature decoder block\n"}, 
  {/* name */ "ctl_index_en", /* range */ "[6:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "If input index signal will be used\n"}, 
  {/* name */ "ctl_index_polarity", /* range */ "[10:8]", /* default */ "1", /* access */ "read-write", /* description */ "Input index signal polarity. 0 - low active, 1 - high active\n"}, 
  {/* name */ "ctl_debounce_en", /* range */ "[14:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "If debounce feature will be enabled\n"}, 
  {/* name */ "ctl_led_en", /* range */ "[18:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "If LED output signal will be enabled\n"}, 
  {/* name */ "ctl_led_polarity", /* range */ "[22:20]", /* default */ "1", /* access */ "read-write", /* description */ "LED output signal polarity. 0 - active low, 1 - active high\n"}, 
  {/* name */ "ctl_num_clk_in_us_m1", /* range */ "[27:24]", /* default */ "0x4", /* access */ "read-write", /* description */ "number of clock cycles in 1 microseconds\n"}, 
  {/* name */ "ctl_mv_direction", /* range */ "[30:28]", /* default */ "0x1", /* access */ "read-write", /* description */ "1 -- moving positive, 0 -- moving negative\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:31]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_quaddec_reg__interval_setting[]  = {
  {/* name */ "ctl_sample_interval_m1", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Actual sample interval = register value  * 1 us.Register value 0 is invalid. \n"}, 
  {/* name */ "ctl_led_interval", /* range */ "[31:16]", /* default */ "0x10", /* access */ "read-write", /* description */ "Actual early start interval = register value * 1 us. Register value 0 is invalid. If this field has an effectively longer time than sample_interval field, the LED will always be asserted.\n"}
};
field_const_t field_const_quaddec_reg__input_pin_assignment0[]  = {
  {/* name */ "ctl_pin_a_sel0", /* range */ "[1:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Input location assignment for pin A\n"}, 
  {/* name */ "ctl_pin_b_sel0", /* range */ "[5:4]", /* default */ "1", /* access */ "read-write", /* description */ "Input location assignment for pin B\n"}, 
  {/* name */ "ctl_pin_idx_sel0", /* range */ "[9:8]", /* default */ "0x2", /* access */ "read-write", /* description */ "Input location assignment for pin INDEX\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:10]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_quaddec_reg__input_pin_assignment1[]  = {
  {/* name */ "ctl_pin_a_sel1", /* range */ "[1:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Input location assignment for pin A\n"}, 
  {/* name */ "ctl_pin_b_sel1", /* range */ "[5:4]", /* default */ "1", /* access */ "read-write", /* description */ "Input location assignment for pin B\n"}, 
  {/* name */ "ctl_pin_idx_sel1", /* range */ "[9:8]", /* default */ "0x2", /* access */ "read-write", /* description */ "Input location assignment for pin INDEX\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:10]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_quaddec_reg__input_pin_assignment2[]  = {
  {/* name */ "ctl_pin_a_sel2", /* range */ "[1:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Input location assignment for pin A\n"}, 
  {/* name */ "ctl_pin_b_sel2", /* range */ "[5:4]", /* default */ "1", /* access */ "read-write", /* description */ "Input location assignment for pin B\n"}, 
  {/* name */ "ctl_pin_idx_sel2", /* range */ "[9:8]", /* default */ "0x2", /* access */ "read-write", /* description */ "Input location assignment for pin INDEX\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:10]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_quaddec_reg__report_interval[]  = {
  {/* name */ "ctl_report_interval_m1", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "How many samples the counter value in the register will be updated (and an counter ready interrupt triggered). If value is 0, the counter will be updated every sample.\n"}
};
field_const_t field_const_quaddec_reg__counter_lmt[]  = {
  {/* name */ "ctl_counter_upper_limit", /* range */ "[15:0]", /* default */ "0x7fff", /* access */ "read-write", /* description */ "Upper limit (signed)\n"}, 
  {/* name */ "ctl_counter_lower_limit", /* range */ "[31:16]", /* default */ "0x8000", /* access */ "read-write", /* description */ "Lower limit (signed)\n"}
};
field_const_t field_const_quaddec_reg__counter_init[]  = {
  {/* name */ "ctl_counter_init_value", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Counter reset value (signed) from disable\n"}, 
  {/* name */ "ctl_counter_idx_init_value", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Counter reset value (signed) from index signal\n"}
};
field_const_t field_const_quaddec_reg__counter_clear[]  = {
  {/* name */ "ctl_clr_smpl_counter", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear sample counter value to its reset value\n"}, 
  {/* name */ "ctl_clr_db_counter", /* range */ "[4:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear double displacement counter value to 0\n"}, 
  {/* name */ "ctl_clr_idx_detect_counter", /* range */ "[8:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear index detected counter to 0\n"}, 
  {/* name */ "ctl_clr_idx_pattern_match_counter", /* range */ "[9:9]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear index pattern match counter to 0\n"}, 
  {/* name */ "ctl_clr_idx_pattern_mismatch_counter", /* range */ "[10:10]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear index pattern mismatch counter to 0\n"}, 
  {/* name */ "ctl_clr_idx_init_val_mismatch_counter", /* range */ "[11:11]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear sample counter mismatch counter to 0\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:12]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_quaddec_reg__sample_counter0[]  = {
  {/* name */ "sts_sample_counter0", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "current sample counter value\n"}, 
  {/* name */ "sts_report_sample_counter0", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "sample counter value from last report time\n"}
};
field_const_t field_const_quaddec_reg__sample_counter1[]  = {
  {/* name */ "sts_sample_counter1", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "current sample counter value\n"}, 
  {/* name */ "sts_report_sample_counter1", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "sample counter value from last report time\n"}
};
field_const_t field_const_quaddec_reg__sample_counter2[]  = {
  {/* name */ "sts_sample_counter2", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "current sample counter value\n"}, 
  {/* name */ "sts_report_sample_counter2", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "sample counter value from last report time\n"}
};
field_const_t field_const_quaddec_reg__db_counter_and_current_input0[]  = {
  {/* name */ "sts_double_displacement_counter0", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "double displacement counter value\n"}, 
  {/* name */ "sts_current_quadA0", /* range */ "[8:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "last sample value on pin A\n"}, 
  {/* name */ "sts_current_quadB0", /* range */ "[9:9]", /* default */ "0x0", /* access */ "read-only", /* description */ "last sample value on pin B\n"}, 
  {/* name */ "sts_current_quadIdx0", /* range */ "[10:10]", /* default */ "0x0", /* access */ "read-only", /* description */ "last sample value on pin INDEX\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:11]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_quaddec_reg__db_counter_and_current_input1[]  = {
  {/* name */ "sts_double_displacement_counter1", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "double displacement counter value\n"}, 
  {/* name */ "sts_current_quadA1", /* range */ "[8:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "last sample value on pin A\n"}, 
  {/* name */ "sts_current_quadB1", /* range */ "[9:9]", /* default */ "0x0", /* access */ "read-only", /* description */ "last sample value on pin B\n"}, 
  {/* name */ "sts_current_quadIdx1", /* range */ "[10:10]", /* default */ "0x0", /* access */ "read-only", /* description */ "last sample value on pin INDEX\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:11]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_quaddec_reg__db_counter_and_current_input2[]  = {
  {/* name */ "sts_double_displacement_counter2", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "double displacement counter value\n"}, 
  {/* name */ "sts_current_quadA2", /* range */ "[8:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "last sample value on pin A\n"}, 
  {/* name */ "sts_current_quadB2", /* range */ "[9:9]", /* default */ "0x0", /* access */ "read-only", /* description */ "last sample value on pin B\n"}, 
  {/* name */ "sts_current_quadIdx2", /* range */ "[10:10]", /* default */ "0x0", /* access */ "read-only", /* description */ "last sample value on pin INDEX\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:11]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_quaddec_reg__index_ctrl[]  = {
  {/* name */ "index_reset_en", /* range */ "[0:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "If the index (and its pattern) is correctly detected, the counter will be reset\n"}, 
  {/* name */ "ctl_index_pattern_len", /* range */ "[6:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "The length of the index pattern to detect. When it's 0, no pattern need to match. Maximal length is 4.\n"}, 
  {/* name */ "ctl_index_pattern0", /* range */ "[9:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "First pattern to match\n"}, 
  {/* name */ "ctl_index_pattern1", /* range */ "[13:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "Second pattern to match\n"}, 
  {/* name */ "ctl_index_pattern2", /* range */ "[17:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Third pattern to match\n"}, 
  {/* name */ "ctl_index_pattern3", /* range */ "[21:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "Fourth pattern to match\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:22]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_quaddec_reg__index_counter0[]  = {
  {/* name */ "sts_index_detect_counter0", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of index signal detected\n"}, 
  {/* name */ "sts_index_pattern_match_counter0", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of index signal with pattern match detected \n"}, 
  {/* name */ "sts_index_pattern_mismatch_counter0", /* range */ "[23:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of index signal with pattern mismatch detected \n"}, 
  {/* name */ "sts_index_init_val_mismatch_counter0", /* range */ "[31:24]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of sample counter mismatch when the counter needs to be reset.\n"}
};
field_const_t field_const_quaddec_reg__index_counter1[]  = {
  {/* name */ "sts_index_detect_counter1", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of index signal detected\n"}, 
  {/* name */ "sts_index_pattern_match_counter1", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of index signal with pattern match detected \n"}, 
  {/* name */ "sts_index_pattern_mismatch_counter1", /* range */ "[23:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of index signal with pattern mismatch detected \n"}, 
  {/* name */ "sts_index_init_val_mismatch_counter1", /* range */ "[31:24]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of sample counter mismatch when the counter needs to be reset.\n"}
};
field_const_t field_const_quaddec_reg__index_counter2[]  = {
  {/* name */ "sts_index_detect_counter2", /* range */ "[7:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of index signal detected\n"}, 
  {/* name */ "sts_index_pattern_match_counter2", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of index signal with pattern match detected \n"}, 
  {/* name */ "sts_index_pattern_mismatch_counter2", /* range */ "[23:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of index signal with pattern mismatch detected \n"}, 
  {/* name */ "sts_index_init_val_mismatch_counter2", /* range */ "[31:24]", /* default */ "0x0", /* access */ "read-only", /* description */ "number of sample counter mismatch when the counter needs to be reset.\n"}
};
field_const_t field_const_quaddec_reg__interval_led_setting_m0[]  = {
  {/* name */ "o_sample_num_en_led_m0", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Actual led on = register value  * 1 us. \n"}
};
field_const_t field_const_quaddec_reg__interval_led_setting_m1[]  = {
  {/* name */ "o_sample_num_en_led_m1", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Actual led on = register value  * 1 us. \n"}
};
field_const_t field_const_quaddec_reg__interval_led_setting_m2[]  = {
  {/* name */ "o_sample_num_en_led_m2", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Actual led on = register value  * 1 us. \n"}
};

field_const_array_t reg_pnt_list__quaddec_reg[NUM_REGS__QUADDEC_REG] = {
  { /* pfield */ field_const_quaddec_reg__interrupt_status, /* size */ 1}, 
  { /* pfield */ field_const_quaddec_reg__interrupt_mask_status, /* size */ 1}, 
  { /* pfield */ field_const_quaddec_reg__interrupt_clear, /* size */ 1}, 
  { /* pfield */ field_const_quaddec_reg__interrupt_set, /* size */ 1}, 
  { /* pfield */ field_const_quaddec_reg__interrupt_mask_set, /* size */ 1}, 
  { /* pfield */ field_const_quaddec_reg__interrupt_mask_clear, /* size */ 1}, 
  { /* pfield */ field_const_quaddec_reg__misc_ctrl, /* size */ 9}, 
  { /* pfield */ field_const_quaddec_reg__interval_setting, /* size */ 2}, 
  { /* pfield */ field_const_quaddec_reg__input_pin_assignment0, /* size */ 4}, 
  { /* pfield */ field_const_quaddec_reg__input_pin_assignment1, /* size */ 4}, 
  { /* pfield */ field_const_quaddec_reg__input_pin_assignment2, /* size */ 4}, 
  { /* pfield */ field_const_quaddec_reg__report_interval, /* size */ 1}, 
  { /* pfield */ field_const_quaddec_reg__counter_lmt, /* size */ 2}, 
  { /* pfield */ field_const_quaddec_reg__counter_init, /* size */ 2}, 
  { /* pfield */ field_const_quaddec_reg__counter_clear, /* size */ 7}, 
  { /* pfield */ field_const_quaddec_reg__sample_counter0, /* size */ 2}, 
  { /* pfield */ field_const_quaddec_reg__sample_counter1, /* size */ 2}, 
  { /* pfield */ field_const_quaddec_reg__sample_counter2, /* size */ 2}, 
  { /* pfield */ field_const_quaddec_reg__db_counter_and_current_input0, /* size */ 5}, 
  { /* pfield */ field_const_quaddec_reg__db_counter_and_current_input1, /* size */ 5}, 
  { /* pfield */ field_const_quaddec_reg__db_counter_and_current_input2, /* size */ 5}, 
  { /* pfield */ field_const_quaddec_reg__index_ctrl, /* size */ 7}, 
  { /* pfield */ field_const_quaddec_reg__index_counter0, /* size */ 4}, 
  { /* pfield */ field_const_quaddec_reg__index_counter1, /* size */ 4}, 
  { /* pfield */ field_const_quaddec_reg__index_counter2, /* size */ 4}, 
  { /* pfield */ field_const_quaddec_reg__interval_led_setting_m0, /* size */ 1}, 
  { /* pfield */ field_const_quaddec_reg__interval_led_setting_m1, /* size */ 1}, 
  { /* pfield */ field_const_quaddec_reg__interval_led_setting_m2, /* size */ 1}
};
