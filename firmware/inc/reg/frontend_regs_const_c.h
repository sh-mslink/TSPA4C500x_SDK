/////////////////////////////////////////////////////////////////////////////////
// This file has been automatically generated by register_slave.pl version dc9b7d3
/////////////////////////////////////////////////////////////////////////////////

// type declaration
#ifndef __REG_CONST_T
#define __REG_CONST_T

#ifndef REG_CONST_NAME_STRING_MAX_LEN   
#define REG_CONST_NAME_STRING_MAX_LEN 64
#endif // REG_CONST_NAME_STRING_MAX_LEN
#ifndef REG_CONST_DESC_STRING_MAX_LEN
#define REG_CONST_DESC_STRING_MAX_LEN 512
#endif // REG_CONST_DESC_STRING_MAX_LEN
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	DWORD address;
	DWORD def;
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} reg_const_t;
typedef struct {
	char name[REG_CONST_NAME_STRING_MAX_LEN];
	char range[32];
	char def[32];
	char access[32];
	char desc[REG_CONST_DESC_STRING_MAX_LEN];
} field_const_t;
typedef struct {
	field_const_t *pfield;
	DWORD size;
} field_const_array_t;
#endif // __REG_CONST_T

#define NUM_REGS__FRONTEND_REGS  55
/* { reg_const_frontend_regs, 55, "frontend_regs"},  */ 
static reg_const_t reg_const_frontend_regs[NUM_REGS__FRONTEND_REGS] = {
  {/* name */ "fifo_flow_status", /* address */ 0x46a01000, /* default */ 0x00000000, /* description */ "FIFO (both Rx and Tx) over/underflow status\n"}, 
  {/* name */ "fifo_flow_ctrl", /* address */ 0x46a01004, /* default */ 0x00000000, /* description */ "Interrupt status register bits. \n"}, 
  {/* name */ "misc_ctrl0", /* address */ 0x46a01040, /* default */ 0x00008b0b, /* description */ "Interrupt status register bits. \n"}, 
  {/* name */ "rx_dc_ctrl0", /* address */ 0x46a01044, /* default */ 0x00800080, /* description */ "Interrupt status register bits. \n"}, 
  {/* name */ "rx_fifo_stat0", /* address */ 0x46a01048, /* default */ 0x00000000, /* description */ "FIFO status\n"}, 
  {/* name */ "tx_fifo_stat0", /* address */ 0x46a0104c, /* default */ 0x00000000, /* description */ "FIFO status\n"}, 
  {/* name */ "dc_acc_ctrl", /* address */ 0x46a01050, /* default */ 0x00000000, /* description */ "DC accumulator control\n"}, 
  {/* name */ "dc_acc_stat0", /* address */ 0x46a01054, /* default */ 0x00000000, /* description */ "DC accumulator control\n"}, 
  {/* name */ "dc_acc_stat1", /* address */ 0x46a01058, /* default */ 0x00000000, /* description */ "DC accumulator control\n"}, 
  {/* name */ "misc_ctrl1", /* address */ 0x46a0105c, /* default */ 0x01000000, /* description */ "More controls for frontend\n"}, 
  {/* name */ "rx_agc_ctrl0", /* address */ 0x46a01060, /* default */ 0x0119e080, /* description */ "Rx AGC Control\n"}, 
  {/* name */ "rx_agc_ctrl1", /* address */ 0x46a01064, /* default */ 0x0085f785, /* description */ "Rx AGC Control\n"}, 
  {/* name */ "rx_agc_ctrl2", /* address */ 0x46a01068, /* default */ 0x00110421, /* description */ "Rx AGC Control\n"}, 
  {/* name */ "rx_agc_stat0", /* address */ 0x46a0106c, /* default */ 0x00000000, /* description */ "Rx AGC Status\n"}, 
  {/* name */ "agc_gain_lut0", /* address */ 0x46a01070, /* default */ 0x1f3f7fff, /* description */ "Rx AGC Status\n"}, 
  {/* name */ "agc_gain_lut1", /* address */ 0x46a01074, /* default */ 0x0103070f, /* description */ "Rx AGC Status\n"}, 
  {/* name */ "agc_gain_lut2", /* address */ 0x46a01078, /* default */ 0xffffffff, /* description */ "Rx AGC Status\n"}, 
  {/* name */ "rssi_ctrl0", /* address */ 0x46a01080, /* default */ 0x600c3000, /* description */ "RSSI Control\n"}, 
  {/* name */ "rssi_ctrl1", /* address */ 0x46a01084, /* default */ 0x06a79df0, /* description */ "RSSI Control\n"}, 
  {/* name */ "rssi_ctrl2", /* address */ 0x46a01088, /* default */ 0x0542ed94, /* description */ "RSSI Control\n"}, 
  {/* name */ "rssi_ctrl3", /* address */ 0x46a0108c, /* default */ 0x031df126, /* description */ "RSSI Control\n"}, 
  {/* name */ "rssi_stat0", /* address */ 0x46a01090, /* default */ 0x00000000, /* description */ "RSSI Status\n"}, 
  {/* name */ "rx_cic_snap", /* address */ 0x46a010c0, /* default */ 0x00000000, /* description */ "Write a '1' to this register to take a snapshot of the first CIC output.\n"}, 
  {/* name */ "dpu_ctrl0", /* address */ 0x46a010e0, /* default */ 0x0000a000, /* description */ "Diagnostic and Playback Unit (dpu)\n"}, 
  {/* name */ "dpu_mem_addr", /* address */ 0x46a010e4, /* default */ 0x00000000, /* description */ "DPU register access to memory.\n"}, 
  {/* name */ "dpu_mem_addr_stat0", /* address */ 0x46a010e8, /* default */ 0x00000000, /* description */ "DPU register access to memory.\n"}, 
  {/* name */ "dpu_mem_wdata", /* address */ 0x46a010ec, /* default */ 0x00000000, /* description */ "DPU register access to memory.\n"}, 
  {/* name */ "dpu_mem_rdata", /* address */ 0x46a010f0, /* default */ 0x00000000, /* description */ "DPU register access to memory.\n"}, 
  {/* name */ "dpu_ctrl1", /* address */ 0x46a010f4, /* default */ 0x00000000, /* description */ "\n"}, 
  {/* name */ "dpu_ctrl2", /* address */ 0x46a010f8, /* default */ 0x00003fff, /* description */ "\n"}, 
  {/* name */ "dpu_stat0", /* address */ 0x46a010fc, /* default */ 0x00000000, /* description */ "\n"}, 
  {/* name */ "dpu_afifo_ctrl0", /* address */ 0x46a01104, /* default */ 0x00000001, /* description */ "Control and status for adc_clk->mem_clk Async FIFO in DPU. 8-deep FIFO.\n"}, 
  {/* name */ "dpu_afifo_ctrl1", /* address */ 0x46a01108, /* default */ 0x00000001, /* description */ "Control and status for rx_clk->mem_clk Async FIFO in DPU. 8-deep FIFO.\n"}, 
  {/* name */ "dpu_afifo_ctrl2", /* address */ 0x46a0110c, /* default */ 0x0c000001, /* description */ "Control and status for mem_clk->dac_clk Async FIFO in DPU. 8-deep FIFO.\n"}, 
  {/* name */ "fpga", /* address */ 0x46a01140, /* default */ 0x00000007, /* description */ "Additional FPGA control\n"}, 
  {/* name */ "antenna_misc_ctrl", /* address */ 0x46a01180, /* default */ 0x00000000, /* description */ "Antenna control misc (for locationing only).\n"}, 
  {/* name */ "antenna_0_start_end_time", /* address */ 0x46a01190, /* default */ 0x00000000, /* description */ "Antenna 0 start/end time\n"}, 
  {/* name */ "antenna_1_start_end_time", /* address */ 0x46a01194, /* default */ 0x00000000, /* description */ "Antenna 1 start/end time\n"}, 
  {/* name */ "antenna_2_start_end_time", /* address */ 0x46a01198, /* default */ 0x00000000, /* description */ "Antenna 2 start/end time\n"}, 
  {/* name */ "antenna_3_start_end_time", /* address */ 0x46a0119c, /* default */ 0x00000000, /* description */ "Antenna 3 start/end time\n"}, 
  {/* name */ "antenna_4_start_end_time", /* address */ 0x46a011a0, /* default */ 0x00000000, /* description */ "Antenna 4 start/end time\n"}, 
  {/* name */ "antenna_5_start_end_time", /* address */ 0x46a011a4, /* default */ 0x00000000, /* description */ "Antenna 5 start/end time\n"}, 
  {/* name */ "antenna_6_start_end_time", /* address */ 0x46a011a8, /* default */ 0x00000000, /* description */ "Antenna 6 start/end time\n"}, 
  {/* name */ "antenna_7_start_end_time", /* address */ 0x46a011ac, /* default */ 0x00000000, /* description */ "Antenna 7 start/end time\n"}, 
  {/* name */ "antenna_8_start_end_time", /* address */ 0x46a011b0, /* default */ 0x00000000, /* description */ "Antenna 8 start/end time\n"}, 
  {/* name */ "antenna_9_start_end_time", /* address */ 0x46a011b4, /* default */ 0x00000000, /* description */ "Antenna 9 start/end time\n"}, 
  {/* name */ "antenna_10_start_end_time", /* address */ 0x46a011b8, /* default */ 0x00000000, /* description */ "Antenna 10 start/end time\n"}, 
  {/* name */ "antenna_11_start_end_time", /* address */ 0x46a011bc, /* default */ 0x00000000, /* description */ "Antenna 11 start/end time\n"}, 
  {/* name */ "antenna_12_start_end_time", /* address */ 0x46a011c0, /* default */ 0x00000000, /* description */ "Antenna 12 start/end time\n"}, 
  {/* name */ "antenna_13_start_end_time", /* address */ 0x46a011c4, /* default */ 0x00000000, /* description */ "Antenna 13 start/end time\n"}, 
  {/* name */ "antenna_14_start_end_time", /* address */ 0x46a011c8, /* default */ 0x00000000, /* description */ "Antenna 14 start/end time\n"}, 
  {/* name */ "antenna_15_start_end_time", /* address */ 0x46a011cc, /* default */ 0x00000000, /* description */ "Antenna 15 start/end time\n"}, 
  {/* name */ "antenna_shm_addr_upper_lmt", /* address */ 0x46a011e0, /* default */ 0x00007fff, /* description */ "Shared memory upper address limit\n"}, 
  {/* name */ "antenna_rx_num_data", /* address */ 0x46a011e8, /* default */ 0x00000000, /* description */ "Number of data received\n"}, 
  {/* name */ "antenna_rx_data", /* address */ 0x46a011f0, /* default */ 0x00000000, /* description */ "Number of data received\n"}
};

field_const_t field_const_frontend_regs__fifo_flow_status[]  = {
  {/* name */ "sts_rx_afifo_overflow", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Rx async FIFO overflow\n"}, 
  {/* name */ "sts_rx_afifo_underflow", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-only", /* description */ "Rx async FIFO underflow\n"}, 
  {/* name */ "sts_tx_afifo_overflow", /* range */ "[2:2]", /* default */ "0x0", /* access */ "read-only", /* description */ "Tx async FIFO overflow\n"}, 
  {/* name */ "sts_tx_afifo_underflow", /* range */ "[3:3]", /* default */ "0x0", /* access */ "read-only", /* description */ "Tx async FIFO underflow\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:4]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__fifo_flow_ctrl[]  = {
  {/* name */ "ctlt_rx_afifo_clear_flow", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear Rx async FIFO over/underflows\n"}, 
  {/* name */ "ctlt_tx_afifo_clear_flow", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "Clear Tx async FIFO over/underflows\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:2]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__misc_ctrl0[]  = {
  {/* name */ "ctlt_rx_afifo_en_wr", /* range */ "[0:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "Rx Async FIFO enable write\n"}, 
  {/* name */ "ctlt_rx_afifo_en_rd", /* range */ "[1:1]", /* default */ "0x1", /* access */ "read-write", /* description */ "Rx Async FIFO enable read\n"}, 
  {/* name */ "ctlq_rx_afifo_read_start", /* range */ "[4:2]", /* default */ "0x2", /* access */ "read-write", /* description */ "Rx Async FIFO read start. Can adjust async FIFO margin.\n"}, 
  {/* name */ "ctlt_rx_sreset_cicdec4", /* range */ "[5:5]", /* default */ "0x0", /* access */ "read-write", /* description */ "Soft-reset for decimate-by-4 CIC.\n"}, 
  {/* name */ "ctlt_rx_sreset_ddfs", /* range */ "[6:6]", /* default */ "0x0", /* access */ "read-write", /* description */ "Soft-reset for DDFS.\n"}, 
  {/* name */ "ctlt_rx_sreset_cicdec2", /* range */ "[7:7]", /* default */ "0x0", /* access */ "read-write", /* description */ "Soft-reset for decimate-by-2 CIC.\n"}, 
  {/* name */ "ctlt_tx_afifo_en_wr", /* range */ "[8:8]", /* default */ "0x1", /* access */ "read-write", /* description */ "Tx Async FIFO enable write\n"}, 
  {/* name */ "ctlt_tx_afifo_en_rd", /* range */ "[9:9]", /* default */ "0x1", /* access */ "read-write", /* description */ "Tx Async FIFO enable read\n"}, 
  {/* name */ "ctlq_tx_afifo_read_start", /* range */ "[12:10]", /* default */ "0x2", /* access */ "read-write", /* description */ "Tx Async FIFO read start. Can adjust async FIFO margin.\n"}, 
  {/* name */ "ctlt_tx_sreset_int", /* range */ "[13:13]", /* default */ "0x0", /* access */ "read-write", /* description */ "Soft reset for interpolator.\n"}, 
  {/* name */ "ctlq_rx_swap_iq_input", /* range */ "[14:14]", /* default */ "0x0", /* access */ "read-write", /* description */ "Rx swap IQ input\n"}, 
  {/* name */ "ctlq_rx_swap_iq_output", /* range */ "[15:15]", /* default */ "0x1", /* access */ "read-write", /* description */ "Rx swap IQ output\n"}, 
  {/* name */ "ctlq_rx_read_num", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Rx read numerator - controls rate of data after the asynchronous FIFO.\n"}, 
  {/* name */ "ctlq_rx_read_den", /* range */ "[23:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "Rx read denominator - controls rate of data after the asynchronous FIFO.\n"}, 
  {/* name */ "ctlq_rx_inv_i_in", /* range */ "[24:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "Invert "I" input from ADC\n"}, 
  {/* name */ "ctlq_rx_inv_q_in", /* range */ "[25:25]", /* default */ "0x0", /* access */ "read-write", /* description */ "Invert "Q" input from ADC\n"}, 
  {/* name */ "ctlq_tx_dac_neg_lp", /* range */ "[26:26]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set, sample Tx LP output to DAC on the negative edge.\n"}, 
  {/* name */ "ctlq_tx_dac_neg_hp", /* range */ "[27:27]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set, sample Tx HP output to DAC on the negative edge.\n"}, 
  {/* name */ "sts_rx_reading", /* range */ "[28:28]", /* default */ "0x0", /* access */ "read-only", /* description */ "If '1', then Rx is active and reading from asynchronous FIFO.\n"}, 
  {/* name */ "ctlq_rx_samp_neg_i", /* range */ "[29:29]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set, sample Rx I on the negative edge.\n"}, 
  {/* name */ "ctlq_rx_samp_neg_q", /* range */ "[30:30]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set, sample Rx Q on the negative edge.\n"}, 
  {/* name */ "ctlq_rx_ddfs_byp", /* range */ "[31:31]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set, bypass the frequency shift of the DDFS. Gain remains constant.\n"}
};
field_const_t field_const_frontend_regs__rx_dc_ctrl0[]  = {
  {/* name */ "ctlt_rx_dec4_dc_i", /* range */ "[8:0]", /* default */ "0d128", /* access */ "read-write", /* description */ "Rx Async FIFO enable write\n"}, 
  {/* name */ "ctlt_rx_dec4_dc_q", /* range */ "[24:16]", /* default */ "0d128", /* access */ "read-write", /* description */ "Rx Async FIFO enable write\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:25]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__rx_fifo_stat0[]  = {
  {/* name */ "sts_rx_afifo_wr_pnt_rck", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_rx_afifo_rd_pnt_rck", /* range */ "[7:4]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_rx_afifo_wr_pnt_wck", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_rx_afifo_rd_pnt_wck", /* range */ "[15:12]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_rx_afifo_fill_rck", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "ctlt_rx_afifo_snap", /* range */ "[20:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "Snapshot of Rx async FIFO, used for debug only.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:21]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__tx_fifo_stat0[]  = {
  {/* name */ "sts_tx_afifo_wr_pnt_rck", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_tx_afifo_rd_pnt_rck", /* range */ "[7:4]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_tx_afifo_wr_pnt_wck", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_tx_afifo_rd_pnt_wck", /* range */ "[15:12]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_tx_afifo_fill_rck", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "ctlt_tx_afifo_snap", /* range */ "[20:20]", /* default */ "0x0", /* access */ "read-write", /* description */ "Snapshot of Tx async FIFO, used for debug only.\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:21]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dc_acc_ctrl[]  = {
  {/* name */ "ctlq_dc_acc_cnt", /* range */ "[2:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Accumulate for 2^(7+this_value) number of samples.\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:3]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dc_acc_stat0[]  = {
  {/* name */ "sts_dc_acc_i", /* range */ "[23:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "DC accumulator I\n"}, 
  {/* name */ "sts_dc_acc_done", /* range */ "[28:28]", /* default */ "0x0", /* access */ "read-only", /* description */ "DC accumulator done\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:29]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dc_acc_stat1[]  = {
  {/* name */ "sts_dc_acc_q", /* range */ "[23:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "DC accumulator Q\n"}
};
field_const_t field_const_frontend_regs__misc_ctrl1[]  = {
  {/* name */ "ctlt_tx_lp_frc_en", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Set to '1' to force value from "ctlq_tx_lp_frc_dat" to DAC's LP input.\n"}, 
  {/* name */ "ctlt_tx_hp_frc_en", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "Set to '1' to force value from "ctlq_tx_hp_frc_dat" to DAC's HP input.\n"}, 
  {/* name */ "ctlq_tx_lp_frc_dat", /* range */ "[15:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "Value to force onto DAC's LP input.\n"}, 
  {/* name */ "ctlq_tx_hp_frc_dat", /* range */ "[23:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Value to force onto DAC's HP input.\n"}, 
  {/* name */ "ctlq_rx_longrange_frc", /* range */ "[24:24]", /* default */ "0x1", /* access */ "read-write", /* description */ "If set (1), then force "rx_longrange" value from register.\n"}, 
  {/* name */ "ctlq_rx_longrange_val", /* range */ "[25:25]", /* default */ "0x0", /* access */ "read-write", /* description */ "Value to force onto "rx_longrange".\n"}, 
  {/* name */ "ctlq_tx_rate_frc", /* range */ "[26:26]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set (1), then force "tx_rate" value from register.\n"}, 
  {/* name */ "ctlq_tx_rate_val", /* range */ "[27:27]", /* default */ "0x0", /* access */ "read-write", /* description */ "Value to force onto "tx_rate".\n"}, 
  {/* name */ "ctlq_tx_band_frc", /* range */ "[28:28]", /* default */ "0x0", /* access */ "read-write", /* description */ "If set (1), then force "tx_band" value from register.\n"}, 
  {/* name */ "ctlq_tx_band_val", /* range */ "[29:29]", /* default */ "0x0", /* access */ "read-write", /* description */ "Value to force onto "tx_band".\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:30]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__rx_agc_ctrl0[]  = {
  {/* name */ "ctl_init_gain_code", /* range */ "[3:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_max_gain_code", /* range */ "[7:4]", /* default */ "0x8", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_min_gain_code", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_window_timing", /* range */ "[17:12]", /* default */ "0d30", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_settling_timing", /* range */ "[23:18]", /* default */ "0d6", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_too_high_th", /* range */ "[29:24]", /* default */ "0x1", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_agc_sreset", /* range */ "[30:30]", /* default */ "0x0", /* access */ "read-write", /* description */ "Soft reset for Rx AGC.\n"}, 
  {/* name */ "ctl_agc_auto_sreset", /* range */ "[31:31]", /* default */ "0x0", /* access */ "read-write", /* description */ "Soft reset for Rx AGC.\n"}
};
field_const_t field_const_frontend_regs__rx_agc_ctrl1[]  = {
  {/* name */ "ctl_ultra_high_th", /* range */ "[5:0]", /* default */ "0x5", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_too_low_th", /* range */ "[11:6]", /* default */ "0x1e", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_ultra_low_th", /* range */ "[17:12]", /* default */ "0x1f", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_too_high_gain_step", /* range */ "[21:18]", /* default */ "0x1", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_ultra_high_gain_step", /* range */ "[25:22]", /* default */ "0x2", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctlq_agc_sel_in", /* range */ "[29:28]", /* default */ "0x0", /* access */ "read-write", /* description */ "Select input source for "gain_too_high" and "gain_too_low".\n0-1: Raw output from analog.\n2: Positive-edge resampled signals\n3: Negative-edge resampled signals\n\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:30]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__rx_agc_ctrl2[]  = {
  {/* name */ "ctl_too_low_gain_step", /* range */ "[3:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_ultra_low_gain_step", /* range */ "[7:4]", /* default */ "0x2", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_opposite_gain_adjust", /* range */ "[8:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_gain_freeze", /* range */ "[9:9]", /* default */ "0x0", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_gain_freeze_after_sync", /* range */ "[10:10]", /* default */ "0x1", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_swap_high_low_input", /* range */ "[11:11]", /* default */ "0x0", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_reset_to_init_gain", /* range */ "[12:12]", /* default */ "0x0", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_gain_code_change_pulse_width", /* range */ "[17:16]", /* default */ "0x1", /* access */ "read-write", /* description */ "Gain code change pulse width in 32MHz clock cycles\n"}, 
  {/* name */ "ctl_rx_agc_gain_reset_rx_disable", /* range */ "[20:20]", /* default */ "0x1", /* access */ "read-write", /* description */ "Reset AGC gain when RX is disabled\n"}, 
  {/* name */ "ctl_rx_agc_gain_reset_rx_disable_val", /* range */ "[27:24]", /* default */ "0x0", /* access */ "read-write", /* description */ "The value to reset AGC gain when RX is disabled\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:28]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__rx_agc_stat0[]  = {
  {/* name */ "ctl_agc_gain_code_freeze", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Set to '1' to freeze gain code debug field. Only for register-reading purposes. Does NOT freeze actual code going to Analog frontend.\n"}, 
  {/* name */ "sts_agc_gain_code", /* range */ "[4:1]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_agc_thermal_gain_code", /* range */ "[14:5]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:15]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__agc_gain_lut0[]  = {
  {/* name */ "ctl_thermal_gain_code_lut0", /* range */ "[31:0]", /* default */ "0x1f3f7fff", /* access */ "read-write", /* description */ "LUT for AGC gain code sent to analog Rx. Each LUT entry is 8 bits. Entries 3 to 0.\n"}
};
field_const_t field_const_frontend_regs__agc_gain_lut1[]  = {
  {/* name */ "ctl_thermal_gain_code_lut1", /* range */ "[31:0]", /* default */ "0x0103070f", /* access */ "read-write", /* description */ "Entries 7 to 4.\n"}
};
field_const_t field_const_frontend_regs__agc_gain_lut2[]  = {
  {/* name */ "ctl_thermal_gain_code_lut2", /* range */ "[31:0]", /* default */ "0xffffffff", /* access */ "read-write", /* description */ "Entries 11 to 8. Extra entries in case we need to compensate for INL.\n"}
};
field_const_t field_const_frontend_regs__rssi_ctrl0[]  = {
  {/* name */ "ctl_rssi_offset", /* range */ "[18:9]", /* default */ "0x218", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_rssi_min", /* range */ "[30:19]", /* default */ "0xc01", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:31]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__rssi_ctrl1[]  = {
  {/* name */ "ctl_rssi_lut0", /* range */ "[8:0]", /* default */ "0x1f0", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_rssi_lut1", /* range */ "[17:9]", /* default */ "0x1ce", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_rssi_lut2", /* range */ "[26:18]", /* default */ "0x1a9", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:27]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__rssi_ctrl2[]  = {
  {/* name */ "ctl_rssi_lut3", /* range */ "[8:0]", /* default */ "0x194", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_rssi_lut4", /* range */ "[17:9]", /* default */ "0x176", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_rssi_lut5", /* range */ "[26:18]", /* default */ "0x150", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:27]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__rssi_ctrl3[]  = {
  {/* name */ "ctl_rssi_lut6", /* range */ "[8:0]", /* default */ "0x126", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_rssi_lut7", /* range */ "[17:9]", /* default */ "0xf8", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "ctl_rssi_lut8", /* range */ "[26:18]", /* default */ "0xc7", /* access */ "read-write", /* description */ "\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:27]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__rssi_stat0[]  = {
  {/* name */ "ctl_rssi_freeze", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Set to '1' to freeze RSSI debug field. Only for register-reading purposes. Does NOT freeze calc_rssi processing.\n"}, 
  {/* name */ "sts_rssi", /* range */ "[14:4]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:15]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__rx_cic_snap[]  = {
  {/* name */ "sts_rx_cic_snap_i", /* range */ "[8:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "sts_rx_cic_snap_q", /* range */ "[17:9]", /* default */ "0x0", /* access */ "read-only", /* description */ "\n"}, 
  {/* name */ "dummy_field", /* range */ "[23:18]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dpu_ctrl0[]  = {
  {/* name */ "ctl_dpu_rx_en", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "RX Enable. When high will immeaditely begin writing to RAM until triggered. Make sure "ctl_dpu_mem_reg_en" is cleared to '0'.\n"}, 
  {/* name */ "ctl_dpu_tx_en", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "TX Enable. When high will immeaditely begin to output. Mutually exclusive w/ rx_en. Make sure "ctl_dpu_mem_reg_en" is cleared to '0'.\nMake sure to set "ctl_dpu_pb_en" to '1' to select DAC input from DPU instead of Tx datapath. \n\n"}, 
  {/* name */ "ctl_dpu_mem_reg_en", /* range */ "[2:2]", /* default */ "0x0", /* access */ "read-write", /* description */ "When set to '1', DPU memory is read and written to from register control. Clear to '0' when you want to run either Capture or Playback.\n"}, 
  {/* name */ "ctl_dpu_reg_trig", /* range */ "[3:3]", /* default */ "0x0", /* access */ "read-write", /* description */ "Register trigger\n"}, 
  {/* name */ "ctl_dpu_trig_source", /* range */ "[6:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "0: dpu_reg_trig            \n1: cmem_thermal_code_change\n2: cmem_lna_gain_valid     \n3: cmem_lna_gain_high      \n4: cmem_lna_gain_low       \n5: cmem_rx_en              \n\n"}, 
  {/* name */ "ctl_dpu_capture_sel", /* range */ "[9:8]", /* default */ "0x0", /* access */ "read-write", /* description */ "16 LSBs of capture data are always raw ADC single bit data in this format: {Q7,I7,Q6,I6,...,Q0,I0} \nwhere Q7/I7 are the OLDEST samples and Q0/I0 are the most NEWEST or most recent samples.\n16 MSBs are determined by this field, "ctl_dpu_capture_sel".\n0: cap_msbs[3:0]  <= agc_gain_code    \ncap_msbs[7:4]  <= del_agc_gain_code   \ncap_msbs[10:8] <= 0                   \ncap_msbs[11]   <= i_rx_en             \ncap_msbs[12]   <= i_lna_gain_valid    \ncap_msbs[13]   <= del_lna_gain_valid  \ncap_msbs[14]   <= i_lna_gain_too_high \ncap_msbs[15]   <= i_lna_gain_too_low  \n1: cap_msbs[3:0]  <= agc_gain_code      \ncap_msbs[13:4] <= agc_thermal_gain_code \ncap_msbs[14]   <= i_lna_gain_too_high   \ncap_msbs[15]   <= i_lna_gain_too_low    \n\n"}, 
  {/* name */ "ctl_dpu_tx_stop", /* range */ "[10:10]", /* default */ "0x0", /* access */ "read-write", /* description */ "Stop transmitting the next time the address hits "last_addr" - if set to '1' at the start of Playback, then it acts like a "one-shot"\n"}, 
  {/* name */ "ctl_dpu_capture_ack", /* range */ "[11:11]", /* default */ "0x0", /* access */ "read-write", /* description */ "Acknowledgement of capture, allow FSM to transition states\n"}, 
  {/* name */ "ctl_dpu_post_trig", /* range */ "[25:12]", /* default */ "0xa", /* access */ "read-write", /* description */ "Acknowledgement of capture, allow FSM to transition states\n"}, 
  {/* name */ "ctl_dpu_cap_msb_per", /* range */ "[29:28]", /* default */ "0x0", /* access */ "read-write", /* description */ "Sub-sampling period of "clk_rx" samples (e.g. the 16 capture MSBs).\n0: no sub-sampling, capture every "clk_rx" cycle\n1: capture every other "clk_rx" cycle\n2: capture every 4 "clk_rx" cycle\n3: capture every 8 "clk_rx" cycle\n\n"}, 
  {/* name */ "ctl_dpu_pb_en", /* range */ "[30:30]", /* default */ "0x0", /* access */ "read-write", /* description */ "Set to '1' to drive DAC data from DPU. Otherwise, '0', data is driven through normal frontend_tx datapath.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:31]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dpu_mem_addr[]  = {
  {/* name */ "ctl_dpu_mem_addr", /* range */ "[13:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Writing to this register will set what DPU memory address to start writing/reading to/from. Writing to this register will automatically trigger a read from this register as well.\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:14]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dpu_mem_addr_stat0[]  = {
  {/* name */ "sts_dpu_mem_addr", /* range */ "[13:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current DPU memory address. Writes and reads automatically increment the address pointer, you can check this field to see where the address pointer is.\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:14]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dpu_mem_wdata[]  = {
  {/* name */ "ctl_dpu_mem_wdata", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Writing to this register will set the write-data into the DPU memory, \nit will also automatically push the data into the memory AND increment the address pointer.\nYou can just keep writing to this register and data will automatically be written into consecutive addresses.\nThe address DOES wrap around with "first" and "last" addresses. You may have to wait a few cycle between writes \ndepending on the speed of the register bus versus the speed of the memory clock.\n\n"}
};
field_const_t field_const_frontend_regs__dpu_mem_rdata[]  = {
  {/* name */ "sts_dpu_mem_rdata", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Read from this register to get the read data from the DPU memory, \nReads will automatically increment the address pointer AND do a read from that address. So\nthe next read from this register will be new read data.\nYou can just keep reading from this register and data will automatically be read from consecutive addresses.\nThe address DOES wrap around with "first" and "last" addresses. You may have to wait a few cycle between reads \ndepending on the speed of the register bus versus the speed of the memory clock.\n\n"}
};
field_const_t field_const_frontend_regs__dpu_ctrl1[]  = {
  {/* name */ "ctlq_dpu_mem_start_addr", /* range */ "[13:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "All memory accesses start at/wrap over to this field.\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:14]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dpu_ctrl2[]  = {
  {/* name */ "ctlq_dpu_mem_last_addr", /* range */ "[13:0]", /* default */ "0x3fff", /* access */ "read-write", /* description */ "All memory accesses end at/wrap over from this field.\n"}, 
  {/* name */ "dummy_field", /* range */ "[15:14]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dpu_stat0[]  = {
  {/* name */ "sts_dpu_rx_state", /* range */ "[1:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "RX_IDLE = 2'd0;    Idle, wait for enable by host\nRX_RUN  = 2'd1;    Logic is enabled and writing to RAM.  Wait for trigger\nRX_TRIG = 2'd2;    Once triggered, capture the appropriate number of samples\nRX_ACK  = 2'd3;    Wait for the host acknowledgement of the capture\n\n"}, 
  {/* name */ "sts_dpu_tx_state", /* range */ "[5:4]", /* default */ "0x0", /* access */ "read-only", /* description */ "TX_IDLE = 2'd0;   Idle, ready to be run.\nTX_RUN  = 2'd1;   Data is being output from the DPU.\nTX_DONE = 2'd2;   Data transmission finished at last_addr. Disable and re-enable to run again.\n\n"}, 
  {/* name */ "sts_dpu_cap_addr", /* range */ "[21:8]", /* default */ "0x0", /* access */ "read-only", /* description */ ""}, 
  {/* name */ "sts_dpu_cap_wrap", /* range */ "[24:24]", /* default */ "0x0", /* access */ "read-only", /* description */ ""}, 
  {/* name */ "dummy_field", /* range */ "[31:25]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dpu_afifo_ctrl0[]  = {
  {/* name */ "ctlq_dpu_adc_fifo_rd_empty_del", /* range */ "[1:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "Additional delay before reading out data from ADC->mem_clk FIFO.\n"}, 
  {/* name */ "ctlt_dpu_adc_fifo_snap", /* range */ "[2:2]", /* default */ "0x0", /* access */ "read-write", /* description */ "Take snapshot of FIFO stats.\n"}, 
  {/* name */ "ctlt_dpu_adc_fifo_clear_flow", /* range */ "[3:3]", /* default */ "0x0", /* access */ "read-write", /* description */ "Toggle to '1' to clear over/underflow status.\n"}, 
  {/* name */ "sts_dpu_adc_fifo_wr_pnt_rck", /* range */ "[7:4]", /* default */ "0x0", /* access */ "read-only", /* description */ "Write-pointer from read clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_adc_fifo_rd_pnt_rck", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "Read-pointer from read clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_adc_fifo_wr_pnt_wck", /* range */ "[15:12]", /* default */ "0x0", /* access */ "read-only", /* description */ "Write-pointer from write clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_adc_fifo_rd_pnt_wck", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "Read-pointer from write clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_adc_fifo_fill_rck", /* range */ "[23:20]", /* default */ "0x0", /* access */ "read-only", /* description */ "Number of elements in FIFO from read clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_adc_fifo_overflow", /* range */ "[24:24]", /* default */ "0x0", /* access */ "read-only", /* description */ "FIFO overflowed, this bit is sticky. Use "clear" to clear.\n"}, 
  {/* name */ "sts_dpu_adc_fifo_underflow", /* range */ "[25:25]", /* default */ "0x0", /* access */ "read-only", /* description */ "FIFO underflowed, this bit is sticky. Use "clear" to clear.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:26]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dpu_afifo_ctrl1[]  = {
  {/* name */ "ctlq_dpu_rx_fifo_rd_empty_del", /* range */ "[1:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "Additional delay before reading out data from rx->mem_clk FIFO.\n"}, 
  {/* name */ "ctlt_dpu_rx_fifo_snap", /* range */ "[2:2]", /* default */ "0x0", /* access */ "read-write", /* description */ "Take snapshot of FIFO stats.\n"}, 
  {/* name */ "ctlt_dpu_rx_fifo_clear_flow", /* range */ "[3:3]", /* default */ "0x0", /* access */ "read-write", /* description */ "Toggle to '1' to clear over/underflow status.\n"}, 
  {/* name */ "sts_dpu_rx_fifo_wr_pnt_rck", /* range */ "[7:4]", /* default */ "0x0", /* access */ "read-only", /* description */ "Write-pointer from read clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_rx_fifo_rd_pnt_rck", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "Read-pointer from read clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_rx_fifo_wr_pnt_wck", /* range */ "[15:12]", /* default */ "0x0", /* access */ "read-only", /* description */ "Write-pointer from write clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_rx_fifo_rd_pnt_wck", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "Read-pointer from write clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_rx_fifo_fill_rck", /* range */ "[23:20]", /* default */ "0x0", /* access */ "read-only", /* description */ "Number of elements in FIFO from read clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_rx_fifo_overflow", /* range */ "[24:24]", /* default */ "0x0", /* access */ "read-only", /* description */ "FIFO overflowed, this bit is sticky. Use "clear" to clear.\n"}, 
  {/* name */ "sts_dpu_rx_fifo_underflow", /* range */ "[25:25]", /* default */ "0x0", /* access */ "read-only", /* description */ "FIFO underflowed, this bit is sticky. Use "clear" to clear.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:26]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__dpu_afifo_ctrl2[]  = {
  {/* name */ "ctlq_dpu_dac_fifo_rd_empty_del", /* range */ "[1:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "Additional delay before reading out data from dac->mem_clk FIFO.\n"}, 
  {/* name */ "ctlt_dpu_dac_fifo_snap", /* range */ "[2:2]", /* default */ "0x0", /* access */ "read-write", /* description */ "Take snapshot of FIFO stats.\n"}, 
  {/* name */ "ctlt_dpu_dac_fifo_clear_flow", /* range */ "[3:3]", /* default */ "0x0", /* access */ "read-write", /* description */ "Toggle to '1' to clear over/underflow status.\n"}, 
  {/* name */ "sts_dpu_dac_fifo_wr_pnt_rck", /* range */ "[7:4]", /* default */ "0x0", /* access */ "read-only", /* description */ "Write-pointer from read clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_dac_fifo_rd_pnt_rck", /* range */ "[11:8]", /* default */ "0x0", /* access */ "read-only", /* description */ "Read-pointer from read clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_dac_fifo_wr_pnt_wck", /* range */ "[15:12]", /* default */ "0x0", /* access */ "read-only", /* description */ "Write-pointer from write clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_dac_fifo_rd_pnt_wck", /* range */ "[19:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "Read-pointer from write clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_dac_fifo_fill_rck", /* range */ "[23:20]", /* default */ "0x0", /* access */ "read-only", /* description */ "Number of elements in FIFO from read clock's perspective. Use "snap" to update.\n"}, 
  {/* name */ "sts_dpu_dac_fifo_overflow", /* range */ "[24:24]", /* default */ "0x0", /* access */ "read-only", /* description */ "FIFO overflowed, this bit is sticky. Use "clear" to clear.\n"}, 
  {/* name */ "sts_dpu_dac_fifo_underflow", /* range */ "[25:25]", /* default */ "0x0", /* access */ "read-only", /* description */ "FIFO underflowed, this bit is sticky. Use "clear" to clear.\n"}, 
  {/* name */ "ctlq_dpu_dac_fill_start", /* range */ "[28:26]", /* default */ "0x3", /* access */ "read-write", /* description */ "Start reading DAC samples from this FIFO only after we hit this fill amount.\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:29]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__fpga[]  = {
  {/* name */ "ctlq_fpga_rw_inplay_sel", /* range */ "[0:0]", /* default */ "0x1", /* access */ "read-write", /* description */ "If set to '1', select Inplay Tx Frontend output to drive phase accumulator\n"}, 
  {/* name */ "ctlq_fpga_sel_dac", /* range */ "[1:1]", /* default */ "0x1", /* access */ "read-write", /* description */ "Select DAC output.\n"}, 
  {/* name */ "ctlq_fpga_tx_rate", /* range */ "[2:2]", /* default */ "0x1", /* access */ "read-write", /* description */ "1:PHY in 1M/500k/125k mode (with modem running at 8 MHz) ==> 4:1 downsampling\n 0:PHY in 2M mode (modem runs at 16 MHz) ==> 2:1 downsampling\n"}, 
  {/* name */ "dummy_field", /* range */ "[7:3]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__antenna_misc_ctrl[]  = {
  {/* name */ "ctl_antenna_rx_ctl_en", /* range */ "[0:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Enable RX control\n"}, 
  {/* name */ "ctl_antenna_tx_ctl_en", /* range */ "[1:1]", /* default */ "0x0", /* access */ "read-write", /* description */ "Enable TX control\n"}, 
  {/* name */ "ctl_default_antenna", /* range */ "[7:4]", /* default */ "0x0", /* access */ "read-write", /* description */ "Default antenna to be enabled for Tx/Rx.\n"}, 
  {/* name */ "ctl_antenna_en", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "individual antenna enable.\n"}
};
field_const_t field_const_frontend_regs__antenna_0_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_1_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_2_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_3_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_4_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_5_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_6_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_7_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_8_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_9_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_10_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_11_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_12_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_13_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_14_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_15_start_end_time[]  = {
  {/* name */ "start_time", /* range */ "[15:0]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable start time\n"}, 
  {/* name */ "end_time", /* range */ "[31:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "Antenna enable end time\n"}
};
field_const_t field_const_frontend_regs__antenna_shm_addr_upper_lmt[]  = {
  {/* name */ "ctl_shm_addr_lmt", /* range */ "[14:0]", /* default */ "0x7fff", /* access */ "read-write", /* description */ "Shared memory upper address limit\n"}, 
  {/* name */ "ctl_rx_data_rd_addr", /* range */ "[30:16]", /* default */ "0x0", /* access */ "read-write", /* description */ "A write will set the current read address (also clear internal buffer for previous data)\n"}, 
  {/* name */ "dummy_field", /* range */ "[31:31]", /* default */ "0x0", /* access */ "no-access", /* description */ ""}
};
field_const_t field_const_frontend_regs__antenna_rx_num_data[]  = {
  {/* name */ "sts_rx_num_data", /* range */ "[14:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Number of data received.\n"}, 
  {/* name */ "sts_rx_data_curr_addr", /* range */ "[30:16]", /* default */ "0x0", /* access */ "read-only", /* description */ "Current read adress\n"}, 
  {/* name */ "sts_rx_data_rdy", /* range */ "[31:31]", /* default */ "0x0", /* access */ "read-only", /* description */ "Data is ready for read\n"}
};
field_const_t field_const_frontend_regs__antenna_rx_data[]  = {
  {/* name */ "sts_rx_data", /* range */ "[31:0]", /* default */ "0x0", /* access */ "read-only", /* description */ "Data: [31:28] antenna used for RX, [27:14] Q, [13:0] I\n"}
};

field_const_array_t reg_pnt_list__frontend_regs[NUM_REGS__FRONTEND_REGS] = {
  { /* pfield */ field_const_frontend_regs__fifo_flow_status, /* size */ 5}, 
  { /* pfield */ field_const_frontend_regs__fifo_flow_ctrl, /* size */ 3}, 
  { /* pfield */ field_const_frontend_regs__misc_ctrl0, /* size */ 22}, 
  { /* pfield */ field_const_frontend_regs__rx_dc_ctrl0, /* size */ 3}, 
  { /* pfield */ field_const_frontend_regs__rx_fifo_stat0, /* size */ 7}, 
  { /* pfield */ field_const_frontend_regs__tx_fifo_stat0, /* size */ 7}, 
  { /* pfield */ field_const_frontend_regs__dc_acc_ctrl, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__dc_acc_stat0, /* size */ 3}, 
  { /* pfield */ field_const_frontend_regs__dc_acc_stat1, /* size */ 1}, 
  { /* pfield */ field_const_frontend_regs__misc_ctrl1, /* size */ 11}, 
  { /* pfield */ field_const_frontend_regs__rx_agc_ctrl0, /* size */ 8}, 
  { /* pfield */ field_const_frontend_regs__rx_agc_ctrl1, /* size */ 7}, 
  { /* pfield */ field_const_frontend_regs__rx_agc_ctrl2, /* size */ 11}, 
  { /* pfield */ field_const_frontend_regs__rx_agc_stat0, /* size */ 4}, 
  { /* pfield */ field_const_frontend_regs__agc_gain_lut0, /* size */ 1}, 
  { /* pfield */ field_const_frontend_regs__agc_gain_lut1, /* size */ 1}, 
  { /* pfield */ field_const_frontend_regs__agc_gain_lut2, /* size */ 1}, 
  { /* pfield */ field_const_frontend_regs__rssi_ctrl0, /* size */ 3}, 
  { /* pfield */ field_const_frontend_regs__rssi_ctrl1, /* size */ 4}, 
  { /* pfield */ field_const_frontend_regs__rssi_ctrl2, /* size */ 4}, 
  { /* pfield */ field_const_frontend_regs__rssi_ctrl3, /* size */ 4}, 
  { /* pfield */ field_const_frontend_regs__rssi_stat0, /* size */ 3}, 
  { /* pfield */ field_const_frontend_regs__rx_cic_snap, /* size */ 3}, 
  { /* pfield */ field_const_frontend_regs__dpu_ctrl0, /* size */ 12}, 
  { /* pfield */ field_const_frontend_regs__dpu_mem_addr, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__dpu_mem_addr_stat0, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__dpu_mem_wdata, /* size */ 1}, 
  { /* pfield */ field_const_frontend_regs__dpu_mem_rdata, /* size */ 1}, 
  { /* pfield */ field_const_frontend_regs__dpu_ctrl1, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__dpu_ctrl2, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__dpu_stat0, /* size */ 5}, 
  { /* pfield */ field_const_frontend_regs__dpu_afifo_ctrl0, /* size */ 11}, 
  { /* pfield */ field_const_frontend_regs__dpu_afifo_ctrl1, /* size */ 11}, 
  { /* pfield */ field_const_frontend_regs__dpu_afifo_ctrl2, /* size */ 12}, 
  { /* pfield */ field_const_frontend_regs__fpga, /* size */ 4}, 
  { /* pfield */ field_const_frontend_regs__antenna_misc_ctrl, /* size */ 4}, 
  { /* pfield */ field_const_frontend_regs__antenna_0_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_1_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_2_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_3_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_4_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_5_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_6_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_7_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_8_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_9_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_10_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_11_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_12_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_13_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_14_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_15_start_end_time, /* size */ 2}, 
  { /* pfield */ field_const_frontend_regs__antenna_shm_addr_upper_lmt, /* size */ 3}, 
  { /* pfield */ field_const_frontend_regs__antenna_rx_num_data, /* size */ 3}, 
  { /* pfield */ field_const_frontend_regs__antenna_rx_data, /* size */ 1}
};
